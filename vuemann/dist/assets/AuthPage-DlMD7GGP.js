import{_ as l,c as n,l as o,a as t,d as s,b as i,w as a,F as u,r as d,o as c}from"./index-CFtw_ocM.js";const p={};function h(v,e){const r=d("router-link");return c(),n(u,null,[e[9]||(e[9]=o('<h1 class="h1 color-primary">Service Auth</h1><p>Ce service permet de gérer l&#39;authentification d&#39;un user</p><h2 class="h2">Installation</h2><ul class="list ml-25"><li>Importer authService dans l&#39;objet services situé dans le fichier main.js.</li></ul><h3 class="h3">Dépendances</h3><p>Ce service est dépedants des services :</p><ul class="list ml-25"><li>router - methode redirectRouteName</li><li>flash - methode success</li><li>ajax - methode req</li><li>form - view Input</li></ul><h3 class="h3">Routes</h3>',8)),t("p",null,[e[1]||(e[1]=s(" Le service auth intégre une page de connexion. ",-1)),i(r,{to:{name:"login"},class:"underline link-underline",target:"_blank"},{default:a(()=>[...e[0]||(e[0]=[s("Vous pouvez la visualiser ici",-1)])]),_:1}),e[2]||(e[2]=s(". ",-1))]),e[10]||(e[10]=t("h3",{class:"h3"},"Configuration",-1)),t("p",null,[e[4]||(e[4]=s(" L'authentification est géré par deux fichiers de config en fonction de si vous voulez sécuriser les requêtes vers une API ou une route de l'application. Pour plus de détails sur les ",-1)),i(r,{to:{name:"config"},class:"underline link-underline"},{default:a(()=>[...e[3]||(e[3]=[s("fichiers de configuration",-1)])]),_:1}),e[5]||(e[5]=s(". ",-1))]),e[11]||(e[11]=o('<h4 class="h4">Les apis</h4><p> Pour rendre l&#39;authentification requises pour une API, la clé <span class="badge-code">auth</span> de l&#39;api correspondante doit être à true dans le fichier app-config.js. </p><div class="div-code"> export const app = {<br>  homepage_url : &quot;/&quot;,<br>  apis : {<br>   api1 : {<br>    url : &quot;www.api.fr&quot;,<br>    auth : true,<br>   },<br>   api2 : {<br>    url : &quot;www.api2.fr&quot;<br>   }<br>  }<br> } </div><p> Dans l&#39;exemple ci-dessus, l&#39;api1 requière une authentification alors que l&#39;api 2 non. </p><h4 class="h4">Les route de l&#39;application</h4><p> Les routes de votre application peuvent utiliser le token d&#39;une api pour vérifier que l&#39;utilisateur courant est connecté. Pour cela rajouter la clé <span class="badge-code">auth</span> avec le nom de l&#39;api dans les métas de la route dans le fichier route-config.js. </p><div class="div-code"> ...<br> {<br>  path: &quot;/&quot;,<br>  name: &quot;home&quot;,<br>  component: Home,<br> },<br> {<br>  path: &quot;/&quot;,<br>  name: &quot;profil&quot;,<br>  component: Profil,<br>  meta : {<br>   auth: &quot;api1&quot; <br>  }<br> },<br> ... </div><p> Dans l&#39;exemple ci-dessus, la route home ne requière pas d&#39;authentification contrainerment à la route profil qui utilisera les crédentiels de l&#39;api1 pour la verification du token. </p><h4 class="h4">Utiliser les crédentials de l&#39;api pour obtenir le token</h4><p> Par default, le service auth va utiliser les crédentials de l&#39;utilisateur pour récupérer le token d&#39;authentification. Mais dans certain cas, l&#39;api utilise ses propres crédentials. Pour cela, remplissez les clés <span class="badge-code">username</span> et <span class="badge-code">password</span> dans l&#39;objet de l&#39;api dans le fichier appConfig. </p><div class="div-code"> export const app = {<br>  homepage_url : &quot;/&quot;,<br>  apis : {<br>   api1 : {<br>    url : &quot;www.api.fr&quot;,<br>    auth : true,<br>    username : &quot;api_username&quot;,<br>    password : &quot;api_passworde&quot;,<br>   }<br>  }<br> } </div><p> Dans l&#39;exemple ci-dessus, le service auth utilisera les crédentials de l&#39;api1 pour récupérer le token de connection. </p><h2 class="h2">Fonctions accessibles depuis le gestionnaire de service</h2><h3 class="h3"><i class="fa-solid fa-diamond mr-5"></i>currentUser</h3><p> Permet de récupérer l&#39;utilisateur connecté courant. </p><h4 class="h4">Appel via le service manager</h4><div class="div-code"> servicesM.serviceservice(&#39;auth:current-user.js&#39;) </div><h3 class="h3"><i class="fa-solid fa-diamond mr-5"></i>getAccessToken</h3><p> Permet de récupérer le token access de l&#39;utilisateur courant. </p><h4 class="h4">Appel via le service manager</h4><div class="div-code"> servicesM.serviceservice(&#39;auth:getAccessToken&#39;) </div><h3 class="h3"><i class="fa-solid fa-diamond mr-5"></i>logout</h3><p> Permet de déconnecter un utilisateur. Cette fonction va supprimer les clés access_token, refresh_token et current_user du localStorage. </p><h4 class="h4">Appel via le service manager</h4><div class="div-code"> servicesM.serviceservice(&#39;auth:logout&#39;) </div><h4 class="h4">Événement</h4><p> Un événement logout est émis lorsque l&#39;utilisateur est déconnecté. </p><div class="div-code"> document.addEventListener(&#39;logout&#39;, () =&gt; { console.log(&#39;Utilisateur déconnecté&#39;); }); </div><h3 class="h3"><i class="fa-solid fa-diamond mr-5"></i>refreshToken</h3><p> Permet de rafraichir un token expiré. Cette fonction va verrifier que la réponse à bien un status 401 et qu&#39;elle comporte bien une clé details dans les datas content le mot &#39;expired&#39;. </p><h4 class="h4">Paramètres</h4><table class="t-default"><thead><tr><th>Nom</th><th>Type</th><th>Required</th><th>Default</th><th>Description</th></tr></thead><tbody><tr><td>api</td><td>String</td><td>oui</td><td>-</td><td> Nom de l&#39;api </td></tr><tr><td>response</td><td>Object</td><td>oui</td><td>-</td><td> Objet response retourné par la requête qui a échoué </td></tr></tbody></table><h4 class="h4">Appel via le service manager</h4><div class="div-code"> servicesM.service(&#39;auth:refreshToken&#39;, [api_name, response]) </div><h3 class="h3"><i class="fa-solid fa-diamond mr-5"></i>RouteAuthCheck</h3><p>Permet de verrifier le token d&#39;une API et s&#39;il est expiré, le rafraichir.</p><h4 class="h4">Paramètres</h4><table class="t-default"><thead><tr><th>Nom</th><th>Type</th><th>Required</th><th>Default</th><th>Description</th></tr></thead><tbody><tr><td>api</td><td>String</td><td>oui</td><td>-</td><td> Nom de l&#39;api </td></tr></tbody></table><h4 class="h4">Appel via le service manager</h4><div class="div-code"> servicesM.service(&#39;auth:routesAuthCheck&#39;, api_name) </div><h3 class="h3"><i class="fa-solid fa-diamond mr-5"></i>Gestion des rôles</h3><p> Le service auth intègre un système de gestion des rôles utilisateur basé sur les groupes et niveaux. </p><h4 class="h4">Configuration des rôles</h4><p> Les rôles sont définis dans le fichier <span class="badge-code">auth-config.js</span> et doivent être importés dans <span class="badge-code">main.js</span>. </p><div class="div-code"> export const auth = {<br>  roles : {<br>   admin : [<br>    {<br>     &quot;groupe&quot; : &quot;RdvManager&quot;,<br>     &quot;level&quot; : 10<br>    }<br>   ],<br>   manager : [<br>    {<br>     &quot;groupe&quot; : &quot;RdvManager&quot;,<br>     &quot;level&quot; : 5<br>    }<br>   ]<br>  }<br> } </div><h4 class="h4">Fonctions disponibles</h4><h5 class="h5">hasRole</h5><p>Vérifie si l&#39;utilisateur connecté possède un rôle spécifique.</p><div class="div-code"> servicesM.service(&#39;auth:hasRole&#39;, &#39;admin&#39;) </div><h2 class="h2">Les vues</h2><h3 class="h3">login</h3>',51)),t("p",null,[e[7]||(e[7]=s(" Le service auth intégre une page de connexion. Vous pouvez la visualiser ",-1)),i(r,{to:{name:"login"},class:"underline link-underline"},{default:a(()=>[...e[6]||(e[6]=[s("ici",-1)])]),_:1}),e[8]||(e[8]=s(". ",-1))])],64)}const b=l(p,[["render",h]]);export{b as default};
