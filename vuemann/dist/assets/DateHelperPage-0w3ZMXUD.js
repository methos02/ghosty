import{_ as e,l as a}from"./index-CFtw_ocM.js";const d={};function r(s,t){return t[0]||(t[0]=a('<h1 class="h1">Date Helper</h1><p> Le Date Helper fournit un ensemble de fonctions utilitaires pour manipuler et formater les dates en utilisant la librairie dayjs. </p><h2 class="h2">Installation</h2><p>Ce helper est disponible automatiquement avec Vuemann. Il utilise dayjs comme dépendance.</p><h3 class="h3">Dépendances</h3><ul class="list ml-25"><li>dayjs</li><li>dayjs/plugin/customParseFormat.js</li></ul><h2 class="h2">Importation</h2><div class="div-code"> import { dateHelper } from &quot;@/helpers/date-helper.js&quot; </div><h2 class="h2">Méthodes disponibles</h2><h3 class="h4"><i class="fa-solid fa-diamond mr-5"></i>parseDate</h3><p> Permet de parser une date selon un format spécifique et de la convertir au format ISO. </p><h4 class="h4">Paramètres</h4><table class="t-default"><thead><tr><th>Nom</th><th>Type</th><th>Required</th><th>Description</th></tr></thead><tbody><tr><td>date_string</td><td>String</td><td>oui</td><td> La chaîne de caractères représentant la date à parser </td></tr><tr><td>format</td><td>String</td><td>oui</td><td> Le format de la date d&#39;entrée (ex: &#39;DD/MM/YYYY&#39;, &#39;YYYY-MM-DD&#39;) </td></tr></tbody></table><h4 class="h4">Retour</h4><table class="t-default"><thead><tr><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>String</td><td> Date au format ISO &#39;YYYY-MM-DD[T]HH:mm:ss[Z]&#39; </td></tr></tbody></table><h4 class="h4">Exemple</h4><div class="div-code"> const parsedDate = dateHelper.parseDate(&#39;15/01/2024&#39;, &#39;DD/MM/YYYY&#39;)<br> // Retour: &#39;2024-01-15T00:00:00Z&#39; </div><h3 class="h4"><i class="fa-solid fa-diamond mr-5"></i>formatDate</h3><p> Permet de formater une date selon un format spécifique. </p><h4 class="h4">Paramètres</h4><table class="t-default"><thead><tr><th>Nom</th><th>Type</th><th>Required</th><th>Default</th><th>Description</th></tr></thead><tbody><tr><td>date_string</td><td>String</td><td>oui</td><td>-</td><td> La chaîne de caractères représentant la date à formater </td></tr><tr><td>format</td><td>String</td><td>non</td><td>&#39;DD/MM/YYYY&#39;</td><td> Le format de sortie souhaité </td></tr></tbody></table><h4 class="h4">Retour</h4><table class="t-default"><thead><tr><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>String</td><td> Date formatée selon le format spécifié </td></tr></tbody></table><h4 class="h4">Exemple</h4><div class="div-code"> const formattedDate = dateHelper.formatDate(&#39;2024-01-15T10:30:00Z&#39;, &#39;DD/MM/YYYY HH:mm&#39;)<br> // Retour: &#39;15/01/2024 10:30&#39; </div><h3 class="h4"><i class="fa-solid fa-diamond mr-5"></i>isBefore</h3><p> Permet de vérifier si une date est antérieure à une autre. </p><h4 class="h4">Paramètres</h4><table class="t-default"><thead><tr><th>Nom</th><th>Type</th><th>Required</th><th>Description</th></tr></thead><tbody><tr><td>date1</td><td>String</td><td>oui</td><td> Première date à comparer </td></tr><tr><td>date2</td><td>String</td><td>oui</td><td> Deuxième date à comparer </td></tr></tbody></table><h4 class="h4">Retour</h4><table class="t-default"><thead><tr><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>Boolean</td><td> true si date1 est antérieure à date2, false sinon </td></tr></tbody></table><h4 class="h4">Exemple</h4><div class="div-code"> const result = dateHelper.isBefore(&#39;2024-01-15&#39;, &#39;2024-01-20&#39;)<br> // Retour: true </div><h3 class="h3"><i class="fa-solid fa-diamond mr-5"></i>isAfter</h3><p> Permet de vérifier si une date est postérieure à une autre. </p><h4 class="h4">Paramètres</h4><table class="t-default"><thead><tr><th>Nom</th><th>Type</th><th>Required</th><th>Description</th></tr></thead><tbody><tr><td>date1</td><td>String</td><td>oui</td><td> Première date à comparer </td></tr><tr><td>date2</td><td>String</td><td>oui</td><td> Deuxième date à comparer </td></tr></tbody></table><h4 class="h4">Retour</h4><table class="t-default"><thead><tr><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>Boolean</td><td> true si date1 est postérieure à date2, false sinon </td></tr></tbody></table><h4 class="h4">Exemple</h4><div class="div-code"> const result = dateHelper.isAfter(&#39;2024-01-20&#39;, &#39;2024-01-15&#39;)<br> // Retour: true </div><h3 class="h3"><i class="fa-solid fa-diamond mr-5"></i>currentDatetime</h3><p> Permet d&#39;obtenir la date et l&#39;heure actuelles au format français. </p><h4 class="h4">Retour</h4><table class="t-default"><thead><tr><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>String</td><td> Date et heure actuelles au format &#39;DD/MM/YYYY HH:mm:ss&#39; </td></tr></tbody></table><h4 class="h4">Exemple</h4><div class="div-code"> const now = dateHelper.currentDatetime()<br> // Retour: &#39;15/01/2024 14:30:25&#39; </div><h3 class="h3"><i class="fa-solid fa-diamond mr-5"></i>currentDate</h3><p> Permet d&#39;obtenir la date actuelle au format français. </p><h4 class="h4">Retour</h4><table class="t-default"><thead><tr><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>String</td><td> Date actuelle au format &#39;DD/MM/YYYY&#39; </td></tr></tbody></table><h4 class="h4">Exemple</h4><div class="div-code"> const today = dateHelper.currentDate()<br> // Retour: &#39;15/01/2024&#39; </div>',53))}const i=e(d,[["render",r]]);export{i as default};
