import{_ as a,l as d}from"./index-CFtw_ocM.js";const t={__name:"DefaultTestsPage",setup(s){return(i,e)=>e[0]||(e[0]=d('<h1 class="h1" data-v-e66ed535>Tests de Validation par Défaut</h1><p data-v-e66ed535> Le système de formulaires Vuemann fournit un ensemble complet de tests de validation prêts à l&#39;emploi. Ces tests permettent de valider automatiquement les données des formulaires selon des règles métier définies. </p><h2 class="h2" data-v-e66ed535>Tests de Base</h2><h3 class="h3" data-v-e66ed535>`required`</h3><p data-v-e66ed535>Valide qu&#39;un champ est obligatoire.</p><div class="div-code" data-v-e66ed535><span class="color-neutral-500" data-v-e66ed535>// Validation</span><br data-v-e66ed535> const result = tests.required(&#39;&#39;) // Retourne &#39;field_required&#39;<br data-v-e66ed535> const result = tests.required(&#39;valeur&#39;) // Retourne &#39;&#39; (valide)<br data-v-e66ed535> const result = tests.required(null) // Retourne &#39;field_required&#39;<br data-v-e66ed535> const result = tests.required(undefined) // Retourne &#39;field_required&#39; </div><p data-v-e66ed535><strong data-v-e66ed535>Usage dans un formulaire :</strong></p><div class="div-code" data-v-e66ed535> &#39;field_name&#39;: &#39;required&#39;<br data-v-e66ed535> &#39;field_name&#39;: &#39;required|min:5|max:100&#39; </div><h3 class="h3" data-v-e66ed535>`in`</h3><p data-v-e66ed535>Valide qu&#39;une valeur est présente dans une liste d&#39;options.</p><div class="div-code" data-v-e66ed535><span class="color-neutral-500" data-v-e66ed535>// Validation</span><br data-v-e66ed535> const options = { options: &#39;option1,option2,option3&#39; }<br data-v-e66ed535> const result = tests.in(&#39;option1&#39;, options) // Retourne &#39;&#39; (valide)<br data-v-e66ed535> const result = tests.in(&#39;option4&#39;, options) // Retourne &#39;field_in:in#option1,option2,option3&#39; </div><p data-v-e66ed535><strong data-v-e66ed535>Usage dans un formulaire :</strong></p><div class="div-code" data-v-e66ed535> &#39;status&#39;: &#39;in:active,inactive,pending&#39;<br data-v-e66ed535> &#39;category&#39;: &#39;in:urgent,normal,low&#39; </div><h2 class="h2" data-v-e66ed535>Tests Numériques</h2><h3 class="h3" data-v-e66ed535>`integer`</h3><p data-v-e66ed535>Valide qu&#39;une valeur est un entier valide.</p><div class="div-code" data-v-e66ed535><span class="color-neutral-500" data-v-e66ed535>// Validation</span><br data-v-e66ed535> const result = tests.integer(&#39;123&#39;) // Retourne &#39;&#39; (valide)<br data-v-e66ed535> const result = tests.integer(&#39;12.34&#39;) // Retourne &#39;field_invalid&#39;<br data-v-e66ed535> const result = tests.integer(&#39;abc&#39;) // Retourne &#39;field_invalid&#39;<br data-v-e66ed535> const result = tests.integer(&#39;-123&#39;) // Retourne &#39;field_invalid&#39;<br data-v-e66ed535> const result = tests.integer(&#39;&#39;) // Retourne &#39;field_invalid&#39; </div><p data-v-e66ed535><strong data-v-e66ed535>Usage dans un formulaire :</strong></p><div class="div-code" data-v-e66ed535> &#39;quantity&#39;: &#39;integer&#39;<br data-v-e66ed535> &#39;age&#39;: &#39;integer&#39; </div><h3 class="h3" data-v-e66ed535>`positive`</h3><p data-v-e66ed535>Valide qu&#39;une valeur est un entier strictement positif (exclut zéro).</p><div class="div-code" data-v-e66ed535><span class="color-neutral-500" data-v-e66ed535>// Validation</span><br data-v-e66ed535> const result = tests.positive(&#39;123&#39;) // Retourne &#39;&#39; (valide)<br data-v-e66ed535> const result = tests.positive(&#39;0&#39;) // Retourne &#39;field_invalid&#39;<br data-v-e66ed535> const result = tests.positive(&#39;-123&#39;) // Retourne &#39;field_invalid&#39;<br data-v-e66ed535> const result = tests.positive(&#39;12.34&#39;) // Retourne &#39;field_invalid&#39;<br data-v-e66ed535> const result = tests.positive(&#39;abc&#39;) // Retourne &#39;field_invalid&#39; </div><p data-v-e66ed535><strong data-v-e66ed535>Usage dans un formulaire :</strong></p><div class="div-code" data-v-e66ed535> &#39;quantity&#39;: &#39;positive&#39;<br data-v-e66ed535> &#39;price&#39;: &#39;positive&#39; </div><h3 class="h3" data-v-e66ed535>`min`</h3><p data-v-e66ed535>Valide qu&#39;une valeur numérique est supérieure ou égale à une valeur minimale.</p><div class="div-code" data-v-e66ed535><span class="color-neutral-500" data-v-e66ed535>// Validation</span><br data-v-e66ed535> const options = { options: &#39;5&#39; }<br data-v-e66ed535> const result = tests.min(&#39;10&#39;, options) // Retourne &#39;&#39; (valide)<br data-v-e66ed535> const result = tests.min(&#39;5&#39;, options) // Retourne &#39;&#39; (valide)<br data-v-e66ed535> const result = tests.min(&#39;3&#39;, options) // Retourne &#39;field_min:min#5&#39; </div><p data-v-e66ed535><strong data-v-e66ed535>Usage dans un formulaire :</strong></p><div class="div-code" data-v-e66ed535> &#39;age&#39;: &#39;min:18&#39;<br data-v-e66ed535> &#39;quantity&#39;: &#39;min:1&#39;<br data-v-e66ed535> &#39;price&#39;: &#39;min:0&#39; </div><h3 class="h3" data-v-e66ed535>`max`</h3><p data-v-e66ed535>Valide qu&#39;une valeur numérique est inférieure ou égale à une valeur maximale.</p><div class="div-code" data-v-e66ed535><span class="color-neutral-500" data-v-e66ed535>// Validation</span><br data-v-e66ed535> const options = { options: &#39;100&#39; }<br data-v-e66ed535> const result = tests.max(&#39;50&#39;, options) // Retourne &#39;&#39; (valide)<br data-v-e66ed535> const result = tests.max(&#39;100&#39;, options) // Retourne &#39;&#39; (valide)<br data-v-e66ed535> const result = tests.max(&#39;150&#39;, options) // Retourne &#39;field_max:max#100&#39; </div><p data-v-e66ed535><strong data-v-e66ed535>Usage dans un formulaire :</strong></p><div class="div-code" data-v-e66ed535> &#39;age&#39;: &#39;max:120&#39;<br data-v-e66ed535> &#39;quantity&#39;: &#39;max:999&#39;<br data-v-e66ed535> &#39;price&#39;: &#39;max:10000&#39; </div><h2 class="h2" data-v-e66ed535>Tests de Dates</h2><h3 class="h3" data-v-e66ed535>`date`</h3><p data-v-e66ed535>Valide le format d&#39;une date selon un format spécifié.</p><div class="div-code" data-v-e66ed535><span class="color-neutral-500" data-v-e66ed535>// Validation</span><br data-v-e66ed535> const options = &#39;DD/MM/YYYY&#39;<br data-v-e66ed535> const result = tests.date(&#39;17/12/2024&#39;, options) // Retourne &#39;&#39; (valide)<br data-v-e66ed535> const result = tests.date(&#39;invalid&#39;, options) // Retourne message d&#39;erreur </div><p data-v-e66ed535><strong data-v-e66ed535>Usage dans un formulaire :</strong></p><div class="div-code" data-v-e66ed535> &#39;birthDate&#39;: &#39;date:DD/MM/YYYY&#39;<br data-v-e66ed535> &#39;startDate&#39;: &#39;date:YYYY-MM-DD&#39; </div><h3 class="h3" data-v-e66ed535>`datePast`</h3><p data-v-e66ed535>Valide qu&#39;une date est dans le passé.</p><div class="div-code" data-v-e66ed535><span class="color-neutral-500" data-v-e66ed535>// Validation</span><br data-v-e66ed535> const options = &#39;DD/MM/YYYY&#39;<br data-v-e66ed535> const result = tests.datePast(&#39;15/01/2020&#39;, options) // Retourne &#39;&#39; (valide)<br data-v-e66ed535> const result = tests.datePast(&#39;17/12/2025&#39;, options) // Retourne message d&#39;erreur </div><p data-v-e66ed535><strong data-v-e66ed535>Usage dans un formulaire :</strong></p><div class="div-code" data-v-e66ed535> &#39;birthDate&#39;: &#39;datePast:DD/MM/YYYY&#39;<br data-v-e66ed535> &#39;startDate&#39;: &#39;datePast:YYYY-MM-DD&#39; </div><h3 class="h3" data-v-e66ed535>`dateFutur`</h3><p data-v-e66ed535>Valide qu&#39;une date est dans le futur.</p><div class="div-code" data-v-e66ed535><span class="color-neutral-500" data-v-e66ed535>// Validation</span><br data-v-e66ed535> const options = &#39;DD/MM/YYYY&#39;<br data-v-e66ed535> const result = tests.dateFutur(&#39;17/12/2025&#39;, options) // Retourne &#39;&#39; (valide)<br data-v-e66ed535> const result = tests.dateFutur(&#39;15/01/2020&#39;, options) // Retourne message d&#39;erreur </div><p data-v-e66ed535><strong data-v-e66ed535>Usage dans un formulaire :</strong></p><div class="div-code" data-v-e66ed535> &#39;appointmentDate&#39;: &#39;dateFutur:DD/MM/YYYY&#39;<br data-v-e66ed535> &#39;endDate&#39;: &#39;dateFutur:YYYY-MM-DD&#39; </div><h2 class="h2" data-v-e66ed535>Tests de Taille</h2><h3 class="h3" data-v-e66ed535>`size`</h3><p data-v-e66ed535>Valide qu&#39;une chaîne a exactement la taille spécifiée.</p><div class="div-code" data-v-e66ed535><span class="color-neutral-500" data-v-e66ed535>// Validation</span><br data-v-e66ed535> const options = &#39;4&#39;<br data-v-e66ed535> const result = tests.size(&#39;test&#39;, { options }) // Retourne &#39;&#39; (valide)<br data-v-e66ed535> const result = tests.size(&#39;testing&#39;, { options }) // Retourne &#39;field_size_equal:size#4&#39;<br data-v-e66ed535> const result = tests.size(&#39;te&#39;, { options }) // Retourne &#39;field_size_equal:size#4&#39; </div><p data-v-e66ed535><strong data-v-e66ed535>Usage dans un formulaire :</strong></p><div class="div-code" data-v-e66ed535> &#39;code&#39;: &#39;size:4&#39;<br data-v-e66ed535> &#39;pin&#39;: &#39;size:6&#39; </div><h3 class="h3" data-v-e66ed535>`sizeMin`</h3><p data-v-e66ed535>Valide qu&#39;une chaîne a une taille minimale.</p><div class="div-code" data-v-e66ed535><span class="color-neutral-500" data-v-e66ed535>// Validation</span><br data-v-e66ed535> const options = 5<br data-v-e66ed535> const result = tests.sizeMin(&#39;testing&#39;, { options }) // Retourne &#39;&#39; (valide)<br data-v-e66ed535> const result = tests.sizeMin(&#39;test&#39;, { options }) // Retourne &#39;field_size_min:size#5&#39; </div><p data-v-e66ed535><strong data-v-e66ed535>Usage dans un formulaire :</strong></p><div class="div-code" data-v-e66ed535> &#39;password&#39;: &#39;sizeMin:8&#39;<br data-v-e66ed535> &#39;description&#39;: &#39;sizeMin:10&#39; </div><h3 class="h3" data-v-e66ed535>`sizeMax`</h3><p data-v-e66ed535>Valide qu&#39;une chaîne a une taille maximale.</p><div class="div-code" data-v-e66ed535><span class="color-neutral-500" data-v-e66ed535>// Validation</span><br data-v-e66ed535> const options = 10<br data-v-e66ed535> const result = tests.sizeMax(&#39;short&#39;, { options }) // Retourne &#39;&#39; (valide)<br data-v-e66ed535> const result = tests.sizeMax(&#39;very long text&#39;, { options }) // Retourne &#39;field_size_max:size#10&#39; </div><p data-v-e66ed535><strong data-v-e66ed535>Usage dans un formulaire :</strong></p><div class="div-code" data-v-e66ed535> &#39;username&#39;: &#39;sizeMax:20&#39;<br data-v-e66ed535> &#39;comment&#39;: &#39;sizeMax:500&#39; </div><h2 class="h2" data-v-e66ed535>Tests Belges</h2><h3 class="h3" data-v-e66ed535>`niss`</h3><p data-v-e66ed535>Valide un numéro de sécurité sociale belge (NISS).</p><div class="div-code" data-v-e66ed535><span class="color-neutral-500" data-v-e66ed535>// Validation</span><br data-v-e66ed535> const result = tests.niss(&#39;12345678901&#39;) // Retourne &#39;&#39; (valide)<br data-v-e66ed535> const result = tests.niss(&#39;invalid&#39;) // Retourne message d&#39;erreur </div><p data-v-e66ed535><strong data-v-e66ed535>Usage dans un formulaire :</strong></p><div class="div-code" data-v-e66ed535> &#39;socialSecurityNumber&#39;: &#39;niss&#39; </div><h3 class="h3" data-v-e66ed535>`biss`</h3><p data-v-e66ed535>Valide un numéro de registre national belge (BISS).</p><div class="div-code" data-v-e66ed535><span class="color-neutral-500" data-v-e66ed535>// Validation</span><br data-v-e66ed535> const result = tests.biss(&#39;12345678901&#39;) // Retourne &#39;&#39; (valide)<br data-v-e66ed535> const result = tests.biss(&#39;invalid&#39;) // Retourne message d&#39;erreur </div><p data-v-e66ed535><strong data-v-e66ed535>Usage dans un formulaire :</strong></p><div class="div-code" data-v-e66ed535> &#39;nationalNumber&#39;: &#39;biss&#39; </div><h2 class="h2" data-v-e66ed535>Combinaison de Règles</h2><p data-v-e66ed535> Les tests peuvent être combinés avec le séparateur <span class="badge-code" data-v-e66ed535>|</span> : </p><div class="div-code" data-v-e66ed535> const formRules = {<br data-v-e66ed535>  // Champ obligatoire avec validation numérique<br data-v-e66ed535>  &#39;quantity&#39;: &#39;required|integer|min:1|max:100&#39;,<br data-v-e66ed535>  <br data-v-e66ed535>  // Champ obligatoire avec validation de date<br data-v-e66ed535>  &#39;birthDate&#39;: &#39;required|datePast:DD/MM/YYYY&#39;,<br data-v-e66ed535>  <br data-v-e66ed535>  // Champ avec validation de taille et format<br data-v-e66ed535>  &#39;username&#39;: &#39;required|sizeMin:3|sizeMax:20&#39;,<br data-v-e66ed535>  <br data-v-e66ed535>  // Champ avec validation d&#39;options<br data-v-e66ed535>  &#39;status&#39;: &#39;required|in:active,inactive,pending&#39;,<br data-v-e66ed535>  <br data-v-e66ed535>  // Champ avec validation complexe<br data-v-e66ed535>  &#39;price&#39;: &#39;required|positive|min:0|max:10000&#39;<br data-v-e66ed535> } </div><h2 class="h2" data-v-e66ed535>Exécution des Tests</h2><div class="div-code" data-v-e66ed535> import { defaultTests } from &#39;@/services/form/src/default-tests-form.js&#39;<br data-v-e66ed535><br data-v-e66ed535> // Exécution d&#39;un test simple<br data-v-e66ed535> const result = defaultTests.execute(&#39;required&#39;, &#39;valeur&#39;, {})<br data-v-e66ed535><br data-v-e66ed535> // Exécution d&#39;un test avec options<br data-v-e66ed535> const result = defaultTests.execute(&#39;min:5&#39;, &#39;3&#39;, {})<br data-v-e66ed535><br data-v-e66ed535> // Exécution d&#39;un test avec format de date<br data-v-e66ed535> const result = defaultTests.execute(&#39;date:DD/MM/YYYY&#39;, &#39;17/12/2024&#39;, {}) </div><h2 class="h2" data-v-e66ed535>Messages d&#39;Erreur</h2><p data-v-e66ed535>Les messages d&#39;erreur suivent un format standardisé :</p><ul class="list ml-25" data-v-e66ed535><li data-v-e66ed535><strong data-v-e66ed535>Champ requis</strong> : <span class="badge-code" data-v-e66ed535>field_required</span></li><li data-v-e66ed535><strong data-v-e66ed535>Valeur invalide</strong> : <span class="badge-code" data-v-e66ed535>field_invalid</span></li><li data-v-e66ed535><strong data-v-e66ed535>Valeur hors limites</strong> : <span class="badge-code" data-v-e66ed535>field_min:min#[valeur]</span> ou <span class="badge-code" data-v-e66ed535>field_max:max#[valeur]</span></li><li data-v-e66ed535><strong data-v-e66ed535>Taille incorrecte</strong> : <span class="badge-code" data-v-e66ed535>field_size_equal:size#[valeur]</span>, <span class="badge-code" data-v-e66ed535>field_size_min:size#[valeur]</span>, <span class="badge-code" data-v-e66ed535>field_size_max:size#[valeur]</span></li><li data-v-e66ed535><strong data-v-e66ed535>Valeur non autorisée</strong> : <span class="badge-code" data-v-e66ed535>field_in:in#[options]</span></li><li data-v-e66ed535><strong data-v-e66ed535>Date invalide</strong> : Messages spécifiques aux tests de date</li></ul><h3 class="h3" data-v-e66ed535>Personnalisation des Messages</h3><p data-v-e66ed535>Les messages peuvent être personnalisés via le système de traduction de l&#39;application :</p><div class="div-code" data-v-e66ed535> // Dans les fichiers de traduction<br data-v-e66ed535> {<br data-v-e66ed535>  &quot;field_required&quot;: &quot;Ce champ est obligatoire&quot;,<br data-v-e66ed535>  &quot;field_invalid&quot;: &quot;Cette valeur n&#39;est pas valide&quot;,<br data-v-e66ed535>  &quot;field_min&quot;: &quot;La valeur doit être au moins {min}&quot;,<br data-v-e66ed535>  &quot;field_max&quot;: &quot;La valeur ne peut pas dépasser {max}&quot;,<br data-v-e66ed535>  &quot;field_size_equal&quot;: &quot;La taille doit être exactement {size} caractères&quot;,<br data-v-e66ed535>  &quot;field_size_min&quot;: &quot;La taille doit être d&#39;au moins {size} caractères&quot;,<br data-v-e66ed535>  &quot;field_size_max&quot;: &quot;La taille ne peut pas dépasser {size} caractères&quot;<br data-v-e66ed535> } </div><h2 class="h2" data-v-e66ed535>Bonnes Pratiques</h2><h3 class="h3" data-v-e66ed535>1. Ordre des Règles</h3><p data-v-e66ed535>Toujours placer les règles dans un ordre logique :</p><div class="div-code" data-v-e66ed535> // ✅ Bon ordre : requis → type → contraintes<br data-v-e66ed535> &#39;field&#39;: &#39;required|integer|min:1|max:100&#39;<br data-v-e66ed535><br data-v-e66ed535> // ❌ Ordre confus : contraintes avant type<br data-v-e66ed535> &#39;field&#39;: &#39;min:1|max:100|required|integer&#39; </div><h3 class="h3" data-v-e66ed535>2. Validation des Données</h3><div class="div-code" data-v-e66ed535> // ✅ Validation complète<br data-v-e66ed535> const rules = {<br data-v-e66ed535>  &#39;age&#39;: &#39;required|integer|min:0|max:120&#39;,<br data-v-e66ed535>  &#39;email&#39;: &#39;required|email&#39;,<br data-v-e66ed535>  &#39;startDate&#39;: &#39;required|dateFutur:DD/MM/YYYY&#39;<br data-v-e66ed535> }<br data-v-e66ed535><br data-v-e66ed535> // ❌ Validation insuffisante<br data-v-e66ed535> const rules = {<br data-v-e66ed535>  &#39;age&#39;: &#39;required&#39;,<br data-v-e66ed535>  &#39;email&#39;: &#39;required&#39;,<br data-v-e66ed535>  &#39;startDate&#39;: &#39;required&#39;<br data-v-e66ed535> } </div><h3 class="h3" data-v-e66ed535>3. Gestion des Erreurs</h3><div class="div-code" data-v-e66ed535> // ✅ Gestion appropriée des erreurs<br data-v-e66ed535> const result = defaultTests.execute(&#39;min:5&#39;, &#39;3&#39;, {})<br data-v-e66ed535> if (result) {<br data-v-e66ed535>  // Afficher l&#39;erreur à l&#39;utilisateur<br data-v-e66ed535>  showflash.error(result)<br data-v-e66ed535> }<br data-v-e66ed535><br data-v-e66ed535> // ❌ Ignorer les erreurs<br data-v-e66ed535> const result = defaultTests.execute(&#39;min:5&#39;, &#39;3&#39;, {})<br data-v-e66ed535> // Pas de gestion d&#39;erreur </div><h2 class="h2" data-v-e66ed535>Conclusion</h2><p data-v-e66ed535> Le système de tests par défaut de Vuemann fournit une base solide et extensible pour la validation des formulaires. En combinant ces tests avec des règles métier personnalisées, vous pouvez créer des formulaires robustes et maintenables. </p>',98))}},n=a(t,[["__scopeId","data-v-e66ed535"]]);export{n as default};
