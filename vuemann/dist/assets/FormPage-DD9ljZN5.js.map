{"version":3,"file":"FormPage-DD9ljZN5.js","sources":["../../src/views/servicesPage/FormPage.vue"],"sourcesContent":["<template>\r\n  <h1 class=\"h1\"> Service Form </h1>\r\n  <p>\r\n    Ce service regroupe toutes la partie liée au formulaire. Que se soit des components ou un système de validation. Vous \r\n    pouvez consulter la <router-link :to=\"{name: 'services.form.inputs'}\" class=\"link-underline underline\">liste des inputs disponible</router-link>.\r\n  </p>\r\n  <h2 class=\"h2\">Installation</h2>\r\n  <ul class=\"list ml-25\">\r\n    <li>Importer formService dans l'objet services situé dans le fichier main.js.</li>\r\n  </ul>\r\n  <h3 class=\"h3\">Dépendances</h3>\r\n  <p>Ce service est dépedants des services :</p>\r\n  <ul class=\"list ml-25\">\r\n    <li>flash - methode error</li>\r\n    <li>locale - methode t</li>\r\n  </ul>\r\n  <h2 class=\"h2\">Fonctionnement</h2>\r\n  <p>\r\n    La logique de la validation d'un formulaire est contenue dans un fichier de type <span class=\"badge-code\">FormRequest</span>. \r\n    Ce fichier doit contenir une fonction prenant en paramètre un objet des données à valider. Dans cette fonction est défini l'ensemble \r\n    des règles que doivent respecter les datas. Les datas et les régles sont passées à la fonction validateForm dont le résultat est retourné.\r\n  </p>\r\n  <h3 class=\"h3\">Object rules</h3>\r\n  <p>\r\n    Cet objet dois être instancié dans la fonction de validation et transmis à la fonction validateForm. Il contient l'ensemble des règles\r\n    de validation de votre formulaire. Il contient une clé par nom d'input qui représente l'ensemble des règles pour cet input. L'objet des règles \r\n    d'input est composé de trois propriétés:\r\n  </p>\r\n  <ul class=\"list ml-25\">\r\n    <li>rules (obligatoire) - array / string : contient l'ensemble des règles appliquées à cet input.</li>\r\n    <li>tests - objet : permet de définir des tests personnalisés pour cet input.</li>\r\n    <li>errors - objet : permet de personnaliser les clés de traduction des erreurs pour tous les tests (prédéfinis et personnalisés).</li>\r\n  </ul>\r\n  <p>\r\n    <i class=\"fa-solid fa-triangle-exclamation color-danger mr-5\"></i>\r\n    le nom d'input global_tests est réservé\r\n    <i class=\"fa-solid fa-triangle-exclamation color-danger ml-5\"></i>\r\n  </p>\r\n  <h3 class=\"h3\">Exemple de fichier de type FormRequest</h3>\r\n  <!-- eslint-disable -->\r\n  <div class=\"div-code\">\r\n    export const validateSearchPatientForm = datas => {<br />    &emsp;const rules = {<br />    &emsp;&emsp;lastname : {<br />    &emsp;&emsp;&emsp;rules : 'required|length_check',<br />    &emsp;&emsp;&emsp;tests : {<br />    &emsp;&emsp;&emsp;&emsp;length_check: value => value.length < 3 ? 'length_check' : ''<br />    &emsp;&emsp;&emsp;}<br />    &emsp;&emsp;&emsp;errors : {<br />    &emsp;&emsp;&emsp;&emsp;length_check: 'field_lastname_short'<br />    &emsp;&emsp;&emsp;}<br />    &emsp;&emsp;},<br />    &emsp;&emsp;birthdate : {<br />    &emsp;&emsp;&emsp;rules : 'required|datePast:yyyy-mm-dd',<br />    &emsp;&emsp;&emsp;errors : {<br />    &emsp;&emsp;&emsp;&emsp;required : 'field_birthdate_required'<br />    &emsp;&emsp;&emsp;}<br />    &emsp;&emsp;},<br />    &emsp;}<br />    &emsp;<br />    &emsp;return validateForm(rules, datas)<br />    }<br />  </div>\r\n  <!-- eslint-enable -->\r\n  <p>\r\n    Il y a possibilité de faire du formatage de datas avant de les transmettre à la fonction validateForm.\r\n  </p>\r\n  <div class=\"div-code\">\r\n    datas.lastname = datas.lastname.toUpperCase()<br />    <br />    return validateForm(rules, datas)\r\n  </div>\r\n  <h2 class=\"h2\">Fonctionnement des tests</h2>\r\n  <p>\r\n    Les tests peuvent être définis de deux manières différentes :\r\n  </p>\r\n  <ul class=\"list ml-25\">\r\n    <li><strong>Tests prédéfinis</strong> : définis dans la propriété <span class=\"badge-code\">rules</span> avec des chaînes de caractères.</li>\r\n    <li><strong>Tests personnalisés</strong> : définis dans la propriété <span class=\"badge-code\">tests</span> avec des fonctions.</li>\r\n  </ul>\r\n  <!-- eslint-disable -->\r\n  <div class=\"div-code\">\r\n    lastname : {<br />    &emsp;rules : 'required|length_check',<br />    &emsp;tests : {<br />    &emsp;&emsp;length_check: value => value.length < 3 ? 'lastname_short' : ''<br />    &emsp;}<br />    },\r\n  </div>\r\n  <!-- eslint-enable -->\r\n  <p>\r\n    Il est possible de chainer les tests prédéfinis en les séparants par des <span class=\"badge-code\">|</span>\r\n  </p>\r\n  <div class=\"div-code\">\r\n    <span class=\"color-neutral-500\">//exemple</span><br />    lastname : {<br />    &emsp;rules : [<br />    &emsp;'required',<br />    &emsp;'date:yyyy-mm-dd'<br />    &emsp;]<br />    },<br />    <br />    <span class=\"color-neutral-500\">//peut être écrit</span><br />    lastname : {<br />    &emsp;rules : 'required|date:yyyy-mm-dd'<br />    },\r\n  </div>\r\n  <p>\r\n    Les tests prédéfinis peuvent avoir des paramètres. Dans l'exemple ci-dessous, le test prédéfini date à pour argument le \r\n    format de la date souhaité.\r\n  </p>\r\n  <div class=\"div-code\">\r\n    lastname : {<br />    &emsp;rules : 'date:yyyy-mm-dd'<br />    \r\n    },\r\n  </div>\r\n  <p>\r\n    Une liste des tests reprenant leur fonctionnement et les arguments requis est disponible : \r\n    <router-link :to=\"{name: 'services.form.defaultTests'}\" class=\"link-underline underline\">liste des tests</router-link>\r\n  </p>\r\n  <h3 class=\"h3\">Tests personnalisés</h3>\r\n  <p>\r\n    Les tests personnalisés sont définis dans la propriété <span class=\"badge-code\">tests</span> sous forme d'objet avec des fonctions.\r\n    Chaque fonction prend deux paramètres:\r\n  </p>\r\n  <ul class=\"list ml-25\">\r\n    <li><strong>value</strong> : la data à tester</li>\r\n    <li><strong>datas</strong> : l'ensemble des données soumis à la validation</li>\r\n  </ul>\r\n  <h4 class=\"h4\">Retour</h4>\r\n  <p>\r\n    Si la validation échoue, il faut retourner le <strong>nom du test</strong> pour récupérer la clé de traduction correspondante dans la propriété <span class=\"badge-code\">errors</span>, sinon une string vide.\r\n  </p>\r\n  <!-- eslint-disable -->\r\n  <div class=\"div-code\">\r\n    <span class=\"color-neutral-500\">//exemple avec tests personnalisés uniquement</span> <br />    lastname : {<br />    &emsp;rules : '',<br />    &emsp;tests : {<br />    &emsp;&emsp;length_check: value => value.length < 3 ? 'length_check' : ''<br />    &emsp;}<br />    &emsp;errors : {<br />    &emsp;&emsp;length_check: 'field_lastname_short'<br />    &emsp;}<br />    },<br />    <br />    <span class=\"color-neutral-500\">//exemple avec le paramètre datas</span><br />    firstname : {<br />    &emsp;rules : '',<br />    &emsp;tests : {<br />    &emsp;&emsp;conditional_required: (value, datas) => datas.lastname && !value ? 'conditional_required' : ''<br />    &emsp;}<br />    &emsp;errors : {<br />    &emsp;&emsp;conditional_required: 'field_firstname_required_if_lastname'<br />    &emsp;}<br />    },<br />    <br />    <span class=\"color-neutral-500\">//exemple avec tests prédéfinis ET personnalisés</span><br />    email : {<br />    &emsp;rules : 'required|email',<br />    &emsp;tests : {<br />    &emsp;&emsp;domain_check: value => value.includes('@company.com') ? '' : 'domain_check'<br />    &emsp;}<br />    &emsp;errors : {<br />    &emsp;&emsp;domain_check: 'field_email_domain_invalid'<br />    &emsp;}<br />    }<br />  </div>\r\n  <!-- eslint-enable -->\r\n  <h3 class=\"h3\">Tests globaux</h3>\r\n  <p>\r\n    Il est possible de tester les interactions entre les inputs grace aux tests globaux. Pour cela, la clé dans l'objet rules \r\n    doit être <span class=\"badge-code\">global_tests</span>.\r\n  </p>\r\n  <p>\r\n    Les tests globaux sont exécutés après tous les tests individuels des inputs. Ils reçoivent l'ensemble des données du formulaire \r\n    et permettent de valider des règles métier complexes qui impliquent plusieurs champs.\r\n  </p>\r\n  \r\n  <h4 class=\"h4\">Structure des tests globaux</h4>\r\n  <p>\r\n    Les tests globaux suivent la même structure que les tests d'input individuels :\r\n  </p>\r\n  <ul class=\"list ml-25\">\r\n    <li>Ils peuvent être des chaînes de caractères (tests prédéfinis) ou des fonctions personnalisées</li>\r\n    <li>Ils reçoivent l'ensemble des données du formulaire en paramètre</li>\r\n    <li>Ils doivent retourner une chaîne vide si la validation réussit, ou un message d'erreur si elle échoue</li>\r\n  </ul>\r\n  \r\n  <h4 class=\"h4\">Exemple de tests globaux</h4>\r\n  <div class=\"div-code\">\r\n    const rules = {<br />\r\n    &emsp;global_tests: [<br />\r\n    &emsp;&emsp;// Test personnalisé pour vérifier qu'un utilisateur admin ne peut pas être créé<br />\r\n    &emsp;&emsp;datas => (datas.username === 'admin' ? 'Admin is not allowed' : ''),<br />\r\n    &emsp;&emsp;// Test pour vérifier que si le nom de famille est présent, le prénom est requis<br />\r\n    &emsp;&emsp;datas => (datas.lastname && !datas.firstname ? 'Le prénom est requis si le nom de famille est présent' : ''),<br />\r\n    &emsp;&emsp;// Test pour vérifier que la date de fin est postérieure à la date de début<br />\r\n    &emsp;&emsp;datas => {<br />\r\n    &emsp;&emsp;&emsp;if (datas.start_date && datas.end_date) {<br />\r\n    &emsp;&emsp;&emsp;&emsp;return new Date(datas.end_date) > new Date(datas.start_date) ? '' : 'La date de fin doit être postérieure à la date de début';<br />\r\n    &emsp;&emsp;&emsp;}<br />\r\n    &emsp;&emsp;&emsp;return '';<br />\r\n    &emsp;&emsp;}<br />\r\n    &emsp;],<br />\r\n    &emsp;username: { rules: 'required' },<br />\r\n    &emsp;lastname: { rules: 'required' },<br />\r\n    &emsp;firstname: { rules: '' },<br />\r\n    &emsp;start_date: { rules: 'date:yyyy-mm-dd' },<br />\r\n    &emsp;end_date: { rules: 'date:yyyy-mm-dd' }<br />\r\n    };\r\n  </div>\r\n  \r\n  <h4 class=\"h4\">Affichage des erreurs globales</h4>\r\n  <p>\r\n    Les erreurs des tests globaux sont stockées avec la clé <span class=\"badge-code\">global_tests</span> dans l'objet d'erreurs. \r\n    Vous pouvez utiliser le composant <span class=\"badge-code\">ErrorFormComponent</span> pour les afficher :\r\n  </p>\r\n  <div class=\"div-code\">\r\n    <span class=\"color-neutral-500\">// Dans votre composant Vue</span><br />\r\n    import ErrorFormComponent from \"@brugmann/vuemann/src/services/form/views/ErrorFormComponent.vue\"<br /><br />\r\n    <span class=\"color-neutral-500\">// Dans le template</span><br />\r\n    &lt;ErrorFormComponent name=\"global_tests\" /&gt;\r\n  </div>\r\n  \r\n  <h4 class=\"h4\">Utilisation avec getError et hasError</h4>\r\n  <p>\r\n    Vous pouvez également vérifier et récupérer les erreurs globales avec les fonctions du service :\r\n  </p>\r\n  <div class=\"div-code\">\r\n    <span class=\"color-neutral-500\">// Vérifier s'il y a des erreurs globales</span><br />\r\n    if (form.hasError('global_tests')) {<br />\r\n    &emsp;const globalError = form.getError('global_tests');<br />\r\n    &emsp;console.log('Erreur globale:', globalError);<br />\r\n    }<br /><br />\r\n    <span class=\"color-neutral-500\">// Effacer les erreurs globales</span><br />\r\n    form.clearError('global_tests');\r\n  </div>\r\n  <h2 class=\"h2\">Fonctions accessibles depuis le gestionnaire de service</h2> \r\n  <!-- validateForm -->\r\n  <h3 class=\"h3\"><i class=\"fa-solid fa-diamond mr-5\"></i>validateForm</h3>\r\n  <p>\r\n    Permet de vérifier un formulaire en fonction d'un objet contenant les règles attendus.\r\n  </p>\r\n  <h4 class=\"h4\">Paramètres</h4>  \r\n  <table class=\"t-default\">\r\n    <thead>\r\n      <tr>\r\n        <th>Nom</th>\r\n        <th>Type</th>\r\n        <th>Required</th>\r\n        <th>Default</th>\r\n        <th>Description</th>\r\n      </tr>\r\n    </thead>\r\n    <tbody>\r\n      <tr>\r\n        <td>current_rules</td>\r\n        <td>String</td>\r\n        <td>oui</td>\r\n        <td>\r\n          Objet reprenant l'ensemble des règles de validation du formulaire.\r\n        </td>\r\n      </tr>\r\n      <tr>\r\n        <td>current_datas</td>\r\n        <td>Object</td>\r\n        <td>oui</td>\r\n        <td>\r\n          Objet reprenant l'ensemble des données du formulaire.\r\n        </td>\r\n      </tr>\r\n      <tr>\r\n        <td>options</td>\r\n        <td>Object</td>\r\n        <td>non</td>\r\n        <td>\r\n          Options de validation.\r\n        </td>\r\n      </tr>\r\n    </tbody>\r\n  </table>\r\n  <h4 class=\"h4\">Options</h4>\r\n  <table class=\"t-default\">\r\n    <thead>\r\n      <tr>\r\n        <th>Nom</th>\r\n        <th>Type</th>\r\n        <th>Default</th>\r\n        <th>Description</th>\r\n      </tr>\r\n    </thead>\r\n    <tbody>\r\n      <tr>\r\n        <td>form</td>\r\n        <td>string</td>\r\n        <td> undefined </td>\r\n        <td>\r\n          Permet de spécifier le nom du formulaire et de modifier le nom des inputs et des erreurs.\r\n        </td>\r\n      </tr>\r\n    </tbody>\r\n  </table>\r\n  <h4 class=\"h4\">Retour</h4>\r\n  <div class=\"div-code\">\r\n  {<br />  &emsp;valide : bool,<br />  &emsp;datas : object,<br />  &emsp;errors : object (default {})<br />  }\r\n  </div>\r\n  <h4 class=\"h4\">Utilisation</h4>\r\n  <div class=\"div-code\">\r\n    <span class=\"color-neutral-500\">//appel clasique</span><br />   \r\n    import { servicesM } from \"@brugmann/vuemann/src/services/services-manager.js\"<br />    <br />          \r\n    servicesM.service('form:validateForm', [current_rules, current_datas])<br /><br />    \r\n    <span class=\"color-neutral-500\">//appel avec le raccourci </span><br />   \r\n    import { validateForm } from \"@brugmann/vuemann/src/services/services-helper.js\"<br />          \r\n    validateForm(current_rules, current_datas)<br />  \r\n  </div> \r\n  <!-- getErrors -->\r\n  <h3 class=\"h3\"><i class=\"fa-solid fa-diamond mr-5\"></i>getErrors</h3>\r\n  <p>\r\n    Retourne l'ensemble des erreurs du formulaire.\r\n  </p>\r\n  <h4 class=\"h4\">Utilisation</h4>\r\n  <div class=\"div-code\">\r\n    <span class=\"color-neutral-500\">//appel clasique</span><br />   \r\n    import { servicesM } from \"@brugmann/vuemann/src/services/services-manager.js\"<br />          \r\n    servicesM.service('form:getErrors')<br />  <br />\r\n    <span class=\"color-neutral-500\">//appel avec le raccourci </span><br />   \r\n    import { form } from \"@brugmann/vuemann/src/services/services-helper.js\"<br />         \r\n    form.getErrors()<br />  \r\n  </div>\r\n  <!-- getError -->\r\n  <h3 class=\"h3\"><i class=\"fa-solid fa-diamond mr-5\"></i>getError</h3>\r\n  <p>\r\n    Retourne l'erreur d'un input.\r\n  </p>\r\n  <h4 class=\"h4\">Paramètres</h4>\r\n  <table class=\"t-default\">\r\n    <thead>\r\n      <tr>\r\n        <th>Nom</th>\r\n        <th>Type</th>\r\n        <th>Required</th>\r\n        <th>Default</th>\r\n        <th>Description</th>\r\n      </tr>\r\n    </thead>\r\n    <tbody>\r\n      <tr>\r\n        <td>input_name</td>\r\n        <td>String</td>\r\n        <td>oui</td>\r\n        <td>\r\n          Nom de l'input.\r\n        </td>\r\n      </tr>\r\n    </tbody>\r\n  </table>\r\n  <h4 class=\"h4\">Utilisation</h4>\r\n  <div class=\"div-code\">\r\n    <span class=\"color-neutral-500\">//appel clasique</span><br />   \r\n    import { servicesM } from \"@brugmann/vuemann/src/services/services-manager.js\"<br />          \r\n    servicesM.service('form:getError', [input_name])<br />  <br />\r\n    <span class=\"color-neutral-500\">//appel avec le raccourci </span><br />   \r\n    import { form } from \"@brugmann/vuemann/src/services/services-helper.js\"<br />         \r\n    form.getError(input_name)<br />  \r\n  </div>\r\n  <!-- hasError -->\r\n  <h3 class=\"h3\"><i class=\"fa-solid fa-diamond mr-5\"></i>hasError</h3>\r\n  <p>\r\n    Retourne true si l'input a une erreur.\r\n  </p>\r\n  <h4 class=\"h4\">Paramètres</h4>\r\n  <table class=\"t-default\">\r\n    <thead>\r\n      <tr>\r\n        <th>Nom</th>\r\n        <th>Type</th>\r\n        <th>Required</th>\r\n        <th>Default</th>\r\n        <th>Description</th>\r\n      </tr>\r\n    </thead>\r\n    <tbody>\r\n      <tr>\r\n        <td>input_name</td>\r\n        <td>String</td>\r\n        <td>oui</td>\r\n        <td>\r\n          Nom de l'input.\r\n        </td>\r\n      </tr>\r\n    </tbody>\r\n  </table>\r\n  <h4 class=\"h4\">Utilisation</h4>\r\n  <div class=\"div-code\">\r\n    <span class=\"color-neutral-500\">//appel clasique</span><br />   \r\n    import { servicesM } from \"@brugmann/vuemann/src/services/services-manager.js\"<br />          \r\n    servicesM.service('form:hasError', [input_name])<br />  <br />\r\n    <span class=\"color-neutral-500\">//appel avec le raccourci </span><br />   \r\n    import { form } from \"@brugmann/vuemann/src/services/services-helper.js\"<br />         \r\n    form.hasError(input_name)<br />  \r\n  </div>\r\n  <!-- clearError -->\r\n  <h3 class=\"h3\"><i class=\"fa-solid fa-diamond mr-5\"></i>clearError</h3>\r\n  <p>\r\n    Supprime l'erreur d'un input.\r\n  </p>  \r\n  <h4 class=\"h4\">Paramètres</h4>\r\n  <table class=\"t-default\">\r\n    <thead>\r\n      <tr>\r\n        <th>Nom</th>\r\n        <th>Type</th>\r\n        <th>Required</th>\r\n        <th>Default</th>\r\n        <th>Description</th>\r\n      </tr>\r\n    </thead>\r\n    <tbody>\r\n      <tr>\r\n        <td>input_name</td>\r\n        <td>String</td>\r\n        <td>oui</td>\r\n        <td>\r\n          Nom de l'input.\r\n        </td>\r\n      </tr>\r\n    </tbody>\r\n  </table>  \r\n  <h4 class=\"h4\">Utilisation</h4>\r\n  <div class=\"div-code\">\r\n    <span class=\"color-neutral-500\">//appel clasique</span><br />   \r\n    import { servicesM } from \"@brugmann/vuemann/src/services/services-manager.js\"<br />          \r\n    servicesM.service('form:clearError', [input_name])<br />  <br />\r\n    <span class=\"color-neutral-500\">//appel avec le raccourci </span><br />   \r\n    import { form } from \"@brugmann/vuemann/src/services/services-helper.js\"<br />         \r\n    form.clearError(input_name)<br />  \r\n  </div>\r\n  <h3 class=\"h3\"><i class=\"fa-solid fa-diamond mr-5\"></i>clearErrors</h3>\r\n  <p>\r\n    Supprime toutes les erreurs du formulaire.\r\n  </p>\r\n  <h4 class=\"h4\">Utilisation</h4>\r\n  <div class=\"div-code\">\r\n    <span class=\"color-neutral-500\">//appel clasique</span><br />   \r\n    import { servicesM } from \"@brugmann/vuemann/src/services/services-manager.js\"<br />          \r\n    servicesM.service('form:clearErrors')<br />  <br />\r\n    <span class=\"color-neutral-500\">//appel avec le raccourci </span><br />   \r\n    import { form } from \"@brugmann/vuemann/src/services/services-helper.js\"<br />         \r\n    form.clearErrors()<br />  \r\n  </div>\r\n  <h2 class=\"h2\">Affichage des erreurs</h2>\r\n  <p>\r\n    Le service form fournit un composant <span class=\"badge-code\">ErrorFormComponent</span> pour afficher tous types d'erreurs de formulaire.\r\n  </p>\r\n  \r\n  <h3 class=\"h3\">Installation du composant</h3>\r\n  <div class=\"div-code\">\r\n    <span class=\"color-neutral-500\">// Dans votre composant Vue</span><br />\r\n    import ErrorFormComponent from \"@brugmann/vuemann/src/services/form/views/ErrorFormComponent.vue\"\r\n  </div>\r\n  \r\n  <h3 class=\"h3\">Utilisation du composant</h3>\r\n  <p>\r\n    <span class=\"badge-code\">ErrorFormComponent</span> peut être utilisé pour afficher différents types d'erreurs :\r\n  </p>\r\n  \r\n  <h4 class=\"h4\">Erreurs d'input individuels</h4>\r\n  <div class=\"div-code\">\r\n    <span class=\"color-neutral-500\">// Dans le template</span><br />\r\n    &lt;input type=\"text\" name=\"username\" /&gt;<br />\r\n    &lt;ErrorFormComponent name=\"username\" /&gt;\r\n  </div>\r\n  \r\n  <h4 class=\"h4\">Erreurs globales</h4>\r\n  <div class=\"div-code\">\r\n    <span class=\"color-neutral-500\">// Dans le template</span><br />\r\n    &lt;ErrorFormComponent name=\"global_tests\" /&gt;\r\n  </div>\r\n  \r\n  <h4 class=\"h4\">Erreurs personnalisées</h4>\r\n  <div class=\"div-code\">\r\n    <span class=\"color-neutral-500\">// Dans le template</span><br />\r\n    &lt;ErrorFormComponent name=\"custom_error\" /&gt;\r\n  </div>\r\n  \r\n  <h3 class=\"h3\">Inclusion automatique dans les composants</h3>\r\n  <p>\r\n    Le composant <span class=\"badge-code\">ErrorFormComponent</span> est automatiquement inclus dans tous les composants d'input du service form.\r\n  </p>\r\n  <p>\r\n    Cela signifie que vous n'avez pas besoin d'ajouter manuellement <span class=\"badge-code\">ErrorFormComponent</span> \r\n    lorsque vous utilisez les composants du service form. Les erreurs s'afficheront automatiquement en dessous du champ correspondant.\r\n  </p>\r\n  \r\n  <h4 class=\"h4\">Exemple avec composants du service form</h4>\r\n  <div class=\"div-code\">\r\n    <span class=\"color-neutral-500\">// Les erreurs s'affichent automatiquement</span><br />\r\n    &lt;Input name=\"username\" /&gt;<br />\r\n    &lt;Select name=\"country\" :options=\"countries\" /&gt;<br />\r\n    &lt;InputSearch name=\"search\" /&gt;<br />\r\n    &lt;InputDate name=\"birthdate\" /&gt;<br />\r\n    &lt;Textarea name=\"description\" /&gt;<br />\r\n    &lt;Switch name=\"active\" /&gt;<br /><br />\r\n    <span class=\"color-neutral-500\">// Pas besoin d'ajouter ErrorFormComponent manuellement</span><br />\r\n    <span class=\"color-neutral-500\">// Les erreurs s'affichent automatiquement sous chaque champ</span>\r\n  </div>\r\n  \r\n  <h4 class=\"h4\">Utilisation manuelle d'ErrorFormComponent</h4>\r\n  <p>\r\n    Vous devez utiliser <span class=\"badge-code\">ErrorFormComponent</span> manuellement uniquement pour :\r\n  </p>\r\n  <ul class=\"list ml-25\">\r\n    <li>Les erreurs globales (<span class=\"badge-code\">name=\"global_tests\"</span>)</li>\r\n    <li>Les erreurs personnalisées non liées à un champ spécifique</li>\r\n    <li>Les champs HTML natifs (input, select, etc.) non encapsulés dans les composants du service</li>\r\n  </ul>\r\n</template>\r\n"],"names":["_cache","_createElementVNode","_createVNode","_component_router_link"],"mappings":"gLACEA,EAAA,CAAA,IAAAA,EAAA,CAAA,EAAAC,EAAkC,KAAA,CAA9B,MAAM,IAAI,EAAC,iBAAc,EAAA,GAC7BA,EAGI,IAAA,KAAA,eAHD,8IAEmB,EAAA,GAAAC,EAA4HC,EAAA,CAA9G,GAAI,CAAA,KAAA,sBAAA,EAAgC,MAAM,uCAA2B,IAA2B,CAAA,GAAAH,EAAA,CAAA,IAAAA,EAAA,CAAA,EAAA,GAA3B,8BAA2B,EAAA,0BAAc,KAClJ,EAAA,kzHAuEAC,EAGI,IAAA,KAAA,eAHD,+FAED,EAAA,GAAAC,EAAsHC,EAAA,CAAxG,GAAI,CAAA,KAAA,4BAAA,EAAsC,MAAM,uCAA2B,IAAe,CAAA,GAAAH,EAAA,CAAA,IAAAA,EAAA,CAAA,EAAA,GAAf,kBAAe,EAAA"}