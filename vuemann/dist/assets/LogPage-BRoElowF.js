import{g as l,c as r,l as g,a as s,v as i,d as n,b as m,w as v,F as h,r as b,o}from"./index-CFtw_ocM.js";const f=async(c,t={})=>{},x={send:f},y={class:"d-flex g-25"},S={class:"f-column flex-1 text-center"},_={key:0,class:"ml-10"},k={class:"f-column flex-1 text-center"},L={key:0,class:"ml-10"},E={__name:"LogPage",setup(c){const t=l(!1),a=l(!1),d=async()=>{a.value=!0,nonExistentVar.value="test"},u=async()=>{await x.send("Erreur de test déclenchée depuis la doc",{module:"Demo"}),t.value=!0};return(V,e)=>{const p=b("router-link");return o(),r(h,null,[e[3]||(e[3]=g('<h1 class="h1">Service Log</h1><p> Le service <b>log</b> permet de centraliser la gestion des erreurs dans l&#39;application VueJS. Il loggue les erreurs en console et les envoie à une route API nommée <span class="badge-code">log</span>. </p><p><i class="fa-solid fa-triangle-exclamation color-danger mr-5"></i> Ce service n&#39;est pas activé en environnement de développement. <i class="fa-solid fa-triangle-exclamation color-danger ml-5"></i></p><h2 class="h2">Installation</h2><ul class="list ml-25"><li>Déclarez la route <span class="badge-code">log</span> dans votre configuration d&#39;API.</li><li class="my-10">Importez et utilisez le <span class="badge-code">logPlugin</span> dans votre <span class="badge-code">main.js</span> pour capturer automatiquement les erreurs VueJS.</li><li>Importez le service <span class="badge-code">logService</span> services situé dans le fichier main.js.</li></ul><h2 class="h2">Fonctionnement</h2><p> Si la route <span class="badge-code">log</span> n&#39;est pas configurée, l&#39;erreur est seulement affichée en console.<br> Si la route existe, l&#39;erreur (message, stack, contexte) est envoyée en POST à <span class="badge-code">/log</span>. </p><h2 class="h2">Méthodes accessibles</h2><h3 class="h3"><i class="fa-solid fa-diamond mr-5"></i>send</h3><p> Permet d&#39;envoyer une erreur au backend et de la logguer en console. </p><h4 class="h4">Paramètres</h4><table class="t-default"><thead><tr><th>Nom</th><th>Type</th><th>Obligatoire</th><th>Default</th><th>Description</th></tr></thead><tbody><tr><td>error</td><td>String | Object</td><td>oui</td><td>-</td><td>L&#39;erreur à logguer (string ou instance d&#39;Error)</td></tr><tr><td>context</td><td>Object</td><td>non</td><td>{}</td><td>Contexte additionnel à envoyer (ex: infos utilisateur, module...)</td></tr></tbody></table><h4 class="h4">Exemple</h4><div class="div-code mb-10"> //utilisation avec le service manager<br> import { servicesM } from &quot;@brugmann/vuemann/src/services/services-manager.js&quot;;<br> servicesM.service(&#39;log:send&#39;, [error, context]);<br> //utilisation avec le helper<br><br> import { log } from &quot;@brugmann/vuemann/src/services/services-helper.js&quot;;<br> log.send(error, context); </div>',14)),s("div",y,[s("div",S,[s("button",{class:"btn btn-primary",onClick:u},"Déclencher l'envoi d'un log d'erreur"),t.value?(o(),r("span",_,"Erreur envoyée !")):i("",!0)]),s("div",k,[s("button",{class:"btn btn-primary",onClick:d},"Déclencher un log d'erreur"),a.value?(o(),r("span",L,"Erreur déclenchée !")):i("",!0)])]),e[4]||(e[4]=s("h2",{class:"h2"},"Lire les logs en production",-1)),s("p",null,[e[1]||(e[1]=n(" Les fichiers de l'application étant minifiés en production, vous ne pourrez pas retrouver la localisation des erreurs facilement. Suivez cette procédure pour lire les logs sur ",-1)),m(p,{to:"/debug",class:"link-underline"},{default:v(()=>[...e[0]||(e[0]=[n("la page de debug",-1)])]),_:1}),e[2]||(e[2]=n(". ",-1))])],64)}}};export{E as default};
