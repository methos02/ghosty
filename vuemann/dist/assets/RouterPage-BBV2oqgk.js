import{_ as i,c as o,l as t,a as s,d as r,b as n,w as l,F as d,r as c,o as u}from"./index-CFtw_ocM.js";const h={};function p(m,e){const a=c("router-link");return u(),o(d,null,[e[5]||(e[5]=t('<h1 class="h1 color-primary">Service Router</h1><p>Ce service permet de gérer les routes de l&#39;application</p><h2 class="h2">Installation</h2><ul class="list ml-25 f-column g-5"><li>Importer <span class="badge-code">routerService</span> dans l&#39;objet services situé dans le fichier main.js.</li><li>Importer <span class="badge-code">routerPlugin</span> dans l&#39;array plugins_synchrone dans le fichier main.js.</li></ul><h3 class="h3">Dépendances</h3><p> Ce service utilise le package externe <a href="https://router.vuejs.org/guide/" class="underline link-underline" target="_blank">vue-router</a>. En plus de ce package, ce service est dépedants des services : </p><ul class="list ml-25"><li>auth - methodes routeAuthCheck et getAccessToken</li><li>utils - methode apiStatus</li></ul><h3 class="h3">Configuration</h3>',8)),s("p",null,[e[1]||(e[1]=r(" Comme expliqué dans la documentation de vue-router, les routes sont gérées par un objet de route. Vous pouvez préciser plusieurs options dans la clé ",-1)),e[2]||(e[2]=s("span",{class:"badge-object"},"meta",-1)),e[3]||(e[3]=r(". Voici le lien vers la documentations des ",-1)),n(a,{to:{name:"config"},class:"underline link-underline"},{default:l(()=>[...e[0]||(e[0]=[r("fichiers de configuration",-1)])]),_:1}),e[4]||(e[4]=r(". ",-1))]),e[6]||(e[6]=t('<h4 class="h4">Métas possibles</h4><table class="t-default"><thead><tr><th>Nom</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>auth</td><td>Bool</td><td> Si cette méta est renseignée, l&#39;utilisateur doit être connecté pour accéder à cette route. </td></tr></tbody></table><h2 class="h2">Fonctions accessibles depuis le gestionnaire de service</h2><h3 class="h3"><i class="fa-solid fa-diamond mr-5"></i>addRoute</h3><p>Permet d&#39;ajouter une route au router.</p><h4 class="h4">Paramètres</h4><table class="t-default"><thead><tr><th>Nom</th><th>Type</th><th>Required</th><th>Default</th><th>Description</th></tr></thead><tbody><tr><td>route</td><td>Object</td><td>oui</td><td>-</td><td> Route représenter sous forme d&#39;objet à ajouter au routeur. </td></tr></tbody></table><h4 class="h4">Utilisation</h4><div class="div-code"> serviceM.service(&#39;routeur:addRoute&#39;, {<br>  path: &quot;/&quot;,<br>  name: &quot;home&quot;,<br>  component: Home,<br> }) </div><p><i class="fa-solid fa-triangle-exclamation color-danger mr-5"></i> Votre objet dois au minimum posséder les clés <span class="badge-code">path</span> et <span class="badge-code">component</span> pour être prise en compte par le router. <i class="fa-solid fa-triangle-exclamation color-danger ml-5"></i></p><h3 class="h3"><i class="fa-solid fa-diamond mr-5"></i>push</h3><p>Permet de rediriger l&#39;utilisateur vers une autre route via son url.</p><h4 class="h4">Paramètres</h4><table class="t-default"><thead><tr><th>Nom</th><th>Type</th><th>Required</th><th>Default</th><th>Description</th></tr></thead><tbody><tr><td>route</td><td>String / Object</td><td>oui</td><td>-</td><td> Route représenter sous forme d&#39;objet ou d&#39;url. </td></tr></tbody></table><h4 class="h4">Utilisation</h4><div class="div-code"><span class="color-neutral-700">//appel via ServiceManager</span><br> import { servicesM } from &#39;@brugmann/vuemann/src/services/services-manager.js&#39;<br> servicesM.service(&#39;routeur:push&#39;, &#39;route_url&#39;)<br><br><span class="color-neutral-700">//appel via servicesHelper</span><br> import { router } from &#39;@brugmann/vuemann/src/services/services-helper.js&#39;<br> router.push(&#39;route_url&#39;) </div><h3 class="h3"><i class="fa-solid fa-diamond mr-5"></i>hasApiRoute</h3><p>Permet de savoir si une route api est définie dans le fichier de configuration <span class="badge-code">routes-api-config.js</span>.</p><h4 class="h4">Paramètres</h4><table class="t-default"><thead><tr><th>Nom</th><th>Type</th><th>Required</th><th>Default</th><th>Description</th></tr></thead><tbody><tr><td>name</td><td>String</td><td>oui</td><td>-</td><td> Nom de la route </td></tr></tbody></table><h4 class="h4">Utilisation</h4><div class="div-code"> serviceM.service(&#39;routeur:hasApiRoute&#39;, &#39;route_name&#39;) </div><h3 class="h3"><i class="fa-solid fa-diamond mr-5"></i>redirectAfterLogin</h3><p>Permet de rediriger l&#39;utilisateur vers l&#39;url qu&#39;il a essayé d&#39;atteindre après cette connecté.</p><h4 class="h4">Utilisation</h4><div class="div-code"> serviceM.service(&#39;routeur:redirectAfterLogin&#39;) </div><h3 class="h3"><i class="fa-solid fa-diamond mr-5"></i>currentRoute</h3><p>Permet de récupérer la route courante.</p><h4 class="h4">Utilisation</h4><div class="div-code"><span class="color-neutral-700">//appel via ServiceManager</span><br> import { servicesM } from &#39;@brugmann/vuemann/src/services/services-manager.js&#39;<br> servicesM.service(&#39;routeur:currentRoute&#39;)<br><br><span class="color-neutral-700">//appel via servicesHelper</span><br> import { route } from &#39;@brugmann/vuemann/src/services/services-helper.js&#39;<br> route.current() </div><h3 class="h3"><i class="fa-solid fa-diamond mr-5"></i>getCurrentRouteParam</h3><p>Permet de récupérer un paramètre de la route courante.</p><h4 class="h4">Utilisation</h4><div class="div-code"><span class="color-neutral-700">//appel via ServiceManager</span><br> import { servicesM } from &#39;@brugmann/vuemann/src/services/services-manager.js&#39;<br> servicesM.service(&#39;routeur:getCurrentRouteParam&#39;, &#39;param_name&#39;)<br><br><span class="color-neutral-700">//appel via servicesHelper</span><br> import { route } from &#39;@brugmann/vuemann/src/services/services-helper.js&#39;<br> route.get(&#39;param_name&#39;) </div><h3 class="h3"><i class="fa-solid fa-diamond mr-5"></i>hasCurrentRouteParam</h3><p>Permet de vérifier si un paramètre existe dans la route courante (params ou query).</p><h4 class="h4">Paramètres</h4><table class="t-default"><thead><tr><th>Nom</th><th>Type</th><th>Required</th><th>Default</th><th>Description</th></tr></thead><tbody><tr><td>param_name</td><td>String</td><td>oui</td><td>-</td><td>Nom du paramètre à vérifier</td></tr></tbody></table><h4 class="h4">Retour</h4><p>Retourne <span class="badge-code">true</span> si le paramètre existe dans les params ou query de la route courante, <span class="badge-code">false</span> sinon.</p><h4 class="h4">Utilisation</h4><div class="div-code"><span class="color-neutral-700">//appel via ServiceManager</span><br> import { servicesM } from &#39;@brugmann/vuemann/src/services/services-manager.js&#39;<br> servicesM.service(&#39;router:hasCurrentRouteParam&#39;, &#39;param_name&#39;)<br><br><span class="color-neutral-700">//appel via servicesHelper</span><br> import { route } from &#39;@brugmann/vuemann/src/services/services-helper.js&#39;<br> route.has(&#39;param_name&#39;) </div><h3 class="h3"><i class="fa-solid fa-diamond mr-5"></i>hasRoute</h3><p>Permet de vérifier si une route existe dans le router.</p><h4 class="h4">Paramètres</h4><table class="t-default"><thead><tr><th>Nom</th><th>Type</th><th>Required</th><th>Default</th><th>Description</th></tr></thead><tbody><tr><td>routeName</td><td>String</td><td>oui</td><td>-</td><td>Nom de la route à vérifier</td></tr></tbody></table><h4 class="h4">Retour</h4><p>Retourne <span class="badge-code">true</span> si la route existe, <span class="badge-code">false</span> sinon.</p><h4 class="h4">Utilisation</h4><div class="div-code"><span class="color-neutral-700">//appel via ServiceManager</span><br> import { servicesM } from &#39;@brugmann/vuemann/src/services/services-manager.js&#39;<br> servicesM.service(&#39;router:hasRoute&#39;, &#39;route_name&#39;)<br><br><span class="color-neutral-700">//appel via servicesHelper</span><br> import { router } from &#39;@brugmann/vuemann/src/services/services-helper.js&#39;<br> router.hasRoute(&#39;route_name&#39;) </div><h3 class="h3"><i class="fa-solid fa-diamond mr-5"></i>getRoute</h3><p>Permet de récupérer une route via son nom.</p><h4 class="h4">Paramètres</h4><table class="t-default"><thead><tr><th>Nom</th><th>Type</th><th>Required</th><th>Default</th><th>Description</th></tr></thead><tbody><tr><td>routeName</td><td>String</td><td>oui</td><td>-</td><td>Nom de la route</td></tr></tbody></table><h4 class="h4">Utilisation</h4><div class="div-code"> serviceM.service(&#39;routeur:getRoute&#39;, &#39;route_name&#39;) </div><h3 class="h3"><i class="fa-solid fa-diamond mr-5"></i>getRoutes</h3><p>Permet de récupérer toutes les routes enregistrées dans le router.</p><h4 class="h4">Retour</h4><p>Retourne un <span class="badge-code">Array</span> contenant toutes les routes configurées dans l&#39;application.</p><h4 class="h4">Utilisation</h4><div class="div-code"><span class="color-neutral-700">//appel via ServiceManager</span><br> import { servicesM } from &#39;@brugmann/vuemann/src/services/services-manager.js&#39;<br> const routes = servicesM.service(&#39;router:getRoutes&#39;)<br><br><span class="color-neutral-700">//appel via servicesHelper</span><br> import { router } from &#39;@brugmann/vuemann/src/services/services-helper.js&#39;<br> const routes = router.getRoutes() </div>',62))],64)}const b=i(h,[["render",p]]);export{b as default};
