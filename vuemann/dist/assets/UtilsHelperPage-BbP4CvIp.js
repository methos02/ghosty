import{_ as e,l as r}from"./index-CFtw_ocM.js";const s={};function o(d,t){return t[0]||(t[0]=r('<h1 class="h1">Utils Helper</h1><p> Le Utils Helper fournit un ensemble de fonctions utilitaires diverses pour simplifier les opérations courantes dans votre application. </p><h2 class="h2">Installation</h2><p>Ce helper est disponible automatiquement avec Vuemann. Il ne nécessite aucune dépendance externe.</p><h2 class="h2">Importation</h2><div class="div-code"> import { utilsH } from &quot;@/helpers/utils-helper.js&quot; </div><h2 class="h2">Méthodes disponibles</h2><h3 class="h4"><i class="fa-solid fa-diamond mr-5"></i>getGenreIconClass</h3><p> Permet d&#39;obtenir la classe d&#39;icône FontAwesome appropriée en fonction du genre d&#39;une personne. </p><h4 class="h4">Paramètres</h4><table class="t-default"><thead><tr><th>Nom</th><th>Type</th><th>Required</th><th>Description</th></tr></thead><tbody><tr><td>genre</td><td>String</td><td>oui</td><td> Le genre de la personne (&#39;M&#39;, &#39;F&#39;, ou autre valeur) </td></tr></tbody></table><h4 class="h4">Retour</h4><table class="t-default"><thead><tr><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>String</td><td> Classe FontAwesome correspondante : &#39;fa-solid fa-mars&#39; (masculin), &#39;fa-solid fa-venus&#39; (féminin), &#39;fa-solid fa-neuter&#39; (autre/neutre) </td></tr></tbody></table><h4 class="h4">Exemple</h4><div class="div-code"> const maleIcon = utilsH.getGenreIconClass(&#39;M&#39;)<br> // Retour: &#39;fa-solid fa-mars&#39;<br> <br> const femaleIcon = utilsH.getGenreIconClass(&#39;F&#39;)<br> // Retour: &#39;fa-solid fa-venus&#39;<br> <br> const neutralIcon = utilsH.getGenreIconClass(&#39;X&#39;)<br> // Retour: &#39;fa-solid fa-neuter&#39; </div><h3 class="h4"><i class="fa-solid fa-diamond mr-5"></i>isRecursivelyIncluded</h3><p> Permet de vérifier récursivement si un sous-ensemble d&#39;objet est inclus dans un objet plus large. </p><h4 class="h4">Paramètres</h4><table class="t-default"><thead><tr><th>Nom</th><th>Type</th><th>Required</th><th>Description</th></tr></thead><tbody><tr><td>subset</td><td>Any</td><td>oui</td><td> Le sous-ensemble à rechercher </td></tr><tr><td>object</td><td>Any</td><td>oui</td><td> L&#39;objet dans lequel rechercher le sous-ensemble </td></tr></tbody></table><h4 class="h4">Retour</h4><table class="t-default"><thead><tr><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>Boolean</td><td> true si le sous-ensemble est inclus dans l&#39;objet, false sinon </td></tr></tbody></table><h4 class="h4">Exemple</h4><div class="div-code"> const subset = { name: &#39;John&#39;, age: 30 }<br> const object = { name: &#39;John&#39;, age: 30, city: &#39;Paris&#39; }<br> <br> const isIncluded = utilsH.isRecursivelyIncluded(subset, object)<br> // Retour: true<br> <br> const subset2 = { name: &#39;John&#39;, age: 25 }<br> const isIncluded2 = utilsH.isRecursivelyIncluded(subset2, object)<br> // Retour: false (âge différent) </div><h3 class="h4"><i class="fa-solid fa-diamond mr-5"></i>copyObject</h3><p> Permet de créer une copie profonde d&#39;un objet en utilisant structuredClone ou JSON comme fallback. </p><h4 class="h4">Paramètres</h4><table class="t-default"><thead><tr><th>Nom</th><th>Type</th><th>Required</th><th>Description</th></tr></thead><tbody><tr><td>object</td><td>Object</td><td>oui</td><td> L&#39;objet à copier </td></tr></tbody></table><h4 class="h4">Retour</h4><table class="t-default"><thead><tr><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>Object</td><td> Une copie profonde de l&#39;objet original </td></tr></tbody></table><h4 class="h4">Exemple</h4><div class="div-code"> const original = { user: { name: &#39;John&#39;, preferences: { theme: &#39;dark&#39; } } }<br> const copy = utilsH.copyObject(original)<br> <br> copy.user.name = &#39;Jane&#39;<br> // L&#39;objet original reste inchangé<br> console.log(original.user.name) // &#39;John&#39;<br> console.log(copy.user.name) // &#39;Jane&#39; </div><h3 class="h4"><i class="fa-solid fa-diamond mr-5"></i>percentOf</h3><p> Permet de calculer le pourcentage d&#39;une partie par rapport au total. </p><h4 class="h4">Paramètres</h4><table class="t-default"><thead><tr><th>Nom</th><th>Type</th><th>Required</th><th>Description</th></tr></thead><tbody><tr><td>part</td><td>Number</td><td>oui</td><td> La partie dont on veut calculer le pourcentage </td></tr><tr><td>total</td><td>Number</td><td>oui</td><td> Le total de référence </td></tr></tbody></table><h4 class="h4">Retour</h4><table class="t-default"><thead><tr><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>Number</td><td> Le pourcentage (entre 0 et 100) </td></tr></tbody></table><h4 class="h4">Exemple</h4><div class="div-code"> const percentage = utilsH.percentOf(25, 100)<br> // Retour: 25 (25% de 100)<br> <br> const percentage2 = utilsH.percentOf(30, 120)<br> // Retour: 25 (30 représente 25% de 120) </div><h3 class="h4"><i class="fa-solid fa-diamond mr-5"></i>getNestedProperty</h3><p> Permet d&#39;accéder à une propriété imbriquée d&#39;un objet en utilisant une notation à points (dot notation). </p><h4 class="h4">Paramètres</h4><table class="t-default"><thead><tr><th>Nom</th><th>Type</th><th>Required</th><th>Description</th></tr></thead><tbody><tr><td>object</td><td>Object</td><td>oui</td><td> L&#39;objet dans lequel rechercher la propriété </td></tr><tr><td>key</td><td>String</td><td>oui</td><td> La clé de la propriété à récupérer (supporte la notation à points pour les propriétés imbriquées) </td></tr></tbody></table><h4 class="h4">Retour</h4><table class="t-default"><thead><tr><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>Any</td><td> La valeur de la propriété demandée, ou undefined si la propriété n&#39;existe pas </td></tr></tbody></table><h4 class="h4">Exemple</h4><div class="div-code"> const user = {<br>   profile: {<br>     name: &#39;John&#39;,<br>     address: {<br>       city: &#39;Paris&#39;,<br>       country: &#39;France&#39;<br>     }<br>   }<br> }<br> <br> const name = utilsH.getNestedProperty(user, &#39;profile.name&#39;)<br> // Retour: &#39;John&#39;<br> <br> const city = utilsH.getNestedProperty(user, &#39;profile.address.city&#39;)<br> // Retour: &#39;Paris&#39;<br> <br> const country = utilsH.getNestedProperty(user, &#39;profile.address.country&#39;)<br> // Retour: &#39;France&#39;<br> <br> const nonExistent = utilsH.getNestedProperty(user, &#39;profile.age&#39;)<br> // Retour: undefined </div><h2 class="h2">Utilisation pratique</h2><p> Ces fonctions utilitaires couvrent des besoins récurrents dans le développement d&#39;applications : </p><ul class="list ml-25"><li><strong>getGenreIconClass</strong> : Affichage d&#39;icônes de genre dans les interfaces utilisateur</li><li><strong>isRecursivelyIncluded</strong> : Validation de données ou filtrage d&#39;objets complexes</li><li><strong>copyObject</strong> : Duplication sûre d&#39;objets pour éviter les mutations accidentelles</li><li><strong>percentOf</strong> : Calculs de pourcentages pour graphiques, barres de progression, etc.</li><li><strong>getNestedProperty</strong> : Accès sécurisé aux propriétés imbriquées d&#39;objets complexes</li></ul>',50))}const i=e(s,[["render",o]]);export{i as default};
