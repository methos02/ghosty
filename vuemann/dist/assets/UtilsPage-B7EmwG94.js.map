{"version":3,"file":"UtilsPage-B7EmwG94.js","sources":["../../src/views/servicesPage/UtilsPage.vue"],"sourcesContent":["<template>\r\n  <h1 class=\"h1\">Service Utils</h1>\r\n  <p>\r\n    Ce service regroupe l'ensemble des fonctionnalités génériques d'une application.\r\n  </p>\r\n  <h2 class=\"h2\">Installation</h2>\r\n  <ul class=\"list ml-25\">\r\n    <li>Importer utilsService dans l'objet services situé dans le fichier main.js.</li>\r\n    <li>Importer utilsPlugin dans l'array plugins_synchrone dans le fichier main.js.</li>\r\n  </ul>\r\n  <h3 class=\"h3\">Dépendances</h3>\r\n  <p>Ce service est dépedants des services :</p>\r\n  <ul class=\"list ml-25\">\r\n    <li>ajax - methode req</li>\r\n    <li>router - methode hasRoute (pour DebugBar)</li>\r\n  </ul>\r\n  <h2 class=\"h2\">Fonctions accessibles depuis le gestionnaire de service</h2> \r\n  <!-- apiStatus -->\r\n  <h3 class=\"h3\"><i class=\"fa-solid fa-diamond mr-5\"></i>apiStatus</h3>\r\n  <p>\r\n    Permet de récupérer le status des apis utilisées par l'application.\r\n  </p>\r\n  <h4 class=\"h4\">configuration</h4>\r\n  <p>\r\n    Le service utils va automatiquement récupérer les apis renseignées dans le fichier de config <router-link :to=\"{name: 'config.app'}\" class=\"link-underline underline\">appConfig</router-link>.\r\n  </p>\r\n  <p>\r\n    Vous pouvez desactiver la vérification du status d'une api en ajouter à sa clé dans le fichier appConfig l'option <span class=\"badge-code\">status:false</span>\r\n  </p>\r\n  <h4 class=\"h4\">utilisation</h4>\r\n  <div class=\"div-code\">\r\n    import { servicesM } from \"@brugmann/vuemann/src/services/services-manager.js\"<br />    <br />    servicesM.service('utilis:apiStatus')<br />  </div>\r\n  \r\n  <h2 class=\"h2\">Composants inclus</h2>\r\n  <!-- DebugBar -->\r\n  <h3 class=\"h3\"><i class=\"fa-solid fa-bug mr-5\"></i>DebugBar</h3>\r\n  <p>\r\n    La barre de debug s'affiche automatiquement en bas à gauche de l'écran et fournit des informations utiles pour le développement :\r\n  </p>\r\n  <ul class=\"list ml-25 f-column g-5\">\r\n    <li><strong>Version de l'application</strong> : Affiche la version actuelle de l'application</li>\r\n    <li><strong>Mode de développement</strong> : Indique si l'application est en mode test ou production</li>\r\n    <li><strong>Mise à jour disponible</strong> : Alerte si une nouvelle version est disponible</li>\r\n    <li><strong>Lien changelog</strong> : Affiche un lien \"Liste des modifications\" vers la page changelog si la route existe</li>\r\n  </ul>\r\n  <h4 class=\"h4\">Lien changelog conditionnel</h4>\r\n  <p>\r\n    Le lien vers la liste des modifications n'apparaît que si une route nommée <span class=\"badge-code\">changelog</span> \r\n    est définie dans votre configuration de routes. Cette vérification utilise la méthode \r\n    <span class=\"badge-code\">router.hasRoute('changelog')</span> du service router.\r\n  </p>\r\n  <!-- AppComponent -->\r\n  <h3 class=\"h3\"><i class=\"fa-solid fa-app-store mr-5\"></i>AppComponent</h3>\r\n  <p>\r\n    Composant racine chargé d'orchestrer l'état global de l'application (<span class=\"badge-code\">INIT</span>, <span class=\"badge-code\">LOADING</span>, <span class=\"badge-code\">LOADED</span>, <span class=\"badge-code\">ERROR</span>)\r\n    via le <span class=\"badge-code\">utilsStore</span>. Il affiche:\r\n  </p>\r\n  <ul class=\"list ml-25 f-column g-5\">\r\n    <li><strong>Router</strong> quand l'application est <span class=\"badge-code\">LOADED</span></li>\r\n    <li><strong>Un loader</strong> quand l'application est <span class=\"badge-code\">INIT</span> ou <span class=\"badge-code\">LOADING</span></li>\r\n    <li><strong>Une vue d'erreur</strong> quand l'application est en <span class=\"badge-code\">ERROR</span> avec un bouton \"Réessayer\"</li>\r\n  </ul>\r\n  <h4 class=\"h4\">Propriétés</h4>\r\n  <table class=\"t-default mb-15 w-100\">\r\n    <thead>\r\n      <tr>\r\n        <th>Nom</th>\r\n        <th>Type</th>\r\n        <th>Required</th>\r\n        <th>Default</th>\r\n        <th>Description</th>\r\n      </tr>\r\n    </thead>\r\n    <tbody>\r\n      <tr>\r\n        <td>cb</td>\r\n        <td>Function</td>\r\n        <td>-</td>\r\n        <td>undefined</td>\r\n        <td>Callback asynchrone exécuté au montage. Si retourne false, l'app passe en état ERROR.</td>\r\n      </tr>\r\n    </tbody>\r\n  </table>\r\n  <h4 class=\"h4\">Exemple</h4>\r\n  <div class=\"div-code\">\r\n    <span class=\"color-neutral-700\">// App.vue</span><br />\r\n    &lt;script setup&gt;<br />\r\n    &nbsp;&nbsp;import AppComponent from '@brugmann/vuemann/src/services/utils/views/AppComponent.vue'<br />\r\n    &nbsp;&nbsp;import { utilsService } from '@brugmann/vuemann/src/services/utils/utils-service.js'<br />\r\n    &nbsp;&nbsp;import { utilsStore } from '@brugmann/vuemann/src/services/utils/utils-store.js'<br />\r\n    &nbsp;&nbsp;import { APP_STATUS } from '@brugmann/vuemann/src/services/utils/utils-constants.js'<br />\r\n    &nbsp;&nbsp;utilsStore.setAppStatus(APP_STATUS.INIT)<br />\r\n    &nbsp;&nbsp;const initApp = async () =&gt; {<br />\r\n    &nbsp;&nbsp;&nbsp;&nbsp;return await utilsService.apiStatus()<br />\r\n    &nbsp;&nbsp;}<br />\r\n    &lt;/script&gt;<br />\r\n    &lt;template&gt;<br />\r\n    &nbsp;&nbsp;&lt;AppComponent :cb=\"initApp\" /&gt;<br />\r\n    &lt;/template&gt;\r\n  </div>\r\n  <h4 class=\"h4\">Gestion des erreurs d'authentification</h4>\r\n  <p>\r\n    Le composant AppComponent gère intelligemment les erreurs d'authentification (401 Unauthorized, 403 Forbidden) :\r\n  </p>\r\n  <ul class=\"list ml-25 f-column g-5\">\r\n    <li><strong>Pages publiques</strong> : Les pages <span class=\"badge-code\">login</span> et <span class=\"badge-code\">changelog</span> restent accessibles même en cas d'erreur d'authentification</li>\r\n    <li><strong>Pas de message d'erreur</strong> : Les erreurs 401/403 n'affichent pas de message d'erreur à l'utilisateur car il sera automatiquement redirigé vers la page de login</li>\r\n    <li><strong>Réexécution automatique</strong> : Après une connexion réussie, le callback se réexécute automatiquement pour recharger l'application</li>\r\n  </ul>\r\n  <h4 class=\"h4\">Format de retour attendu</h4>\r\n  <p>\r\n    Le callback doit retourner un objet avec les propriétés suivantes :\r\n  </p>\r\n  <table class=\"t-default mb-15 w-100\">\r\n    <thead>\r\n      <tr>\r\n        <th>Propriété</th>\r\n        <th>Type</th>\r\n        <th>Description</th>\r\n      </tr>\r\n    </thead>\r\n    <tbody>\r\n      <tr>\r\n        <td>status</td>\r\n        <td>Number</td>\r\n        <td>Statut HTTP de la réponse (200 pour succès, 401/403 pour erreurs d'auth, etc.)</td>\r\n      </tr>\r\n      <tr>\r\n        <td>error</td>\r\n        <td>String</td>\r\n        <td>Message d'erreur (optionnel, utilisé pour les erreurs non-authentification)</td>\r\n      </tr>\r\n    </tbody>\r\n  </table>\r\n  <div class=\"div-code\">\r\n    <span class=\"color-neutral-700\">// Exemple de retour pour une erreur d'authentification</span><br />\r\n    { status: 401, error: \"Unauthorized\" }<br /><br />\r\n    <span class=\"color-neutral-700\">// Exemple de retour pour une erreur serveur</span><br />\r\n    { status: 500, error: \"Internal Server Error\" }<br /><br />\r\n    <span class=\"color-neutral-700\">// Exemple de retour pour un succès</span><br />\r\n    { status: 200 }\r\n  </div>\r\n\r\n  <h2 class=\"h2\">Fonctions utilitaires</h2>\r\n  <!-- hydrate -->\r\n  <h3 class=\"h3\"><i class=\"fa-solid fa-link mr-5\"></i>hydrate</h3>\r\n  <p>\r\n    La fonction <span class=\"badge-code\">hydrate</span> permet de charger automatiquement les entités complètes associées à des références d'objets.\r\n    Elle remplace les objets de référence simples (comme <span class=\"badge-code\">{ id: 1 }</span>) par les entités complètes chargées depuis les controllers.\r\n  </p>\r\n\r\n  <h4 class=\"h4\">Paramètres</h4>\r\n  <table class=\"t-default mb-15 w-100\">\r\n    <thead>\r\n      <tr>\r\n        <th>Paramètre</th>\r\n        <th>Type</th>\r\n        <th>Obligatoire</th>\r\n        <th>Description</th>\r\n      </tr>\r\n    </thead>\r\n    <tbody>\r\n      <tr>\r\n        <td>data</td>\r\n        <td>Array</td>\r\n        <td>Oui</td>\r\n        <td>Tableau d'objets contenant des références à hydrater</td>\r\n      </tr>\r\n      <tr>\r\n        <td>keys</td>\r\n        <td>Array&lt;string&gt;</td>\r\n        <td>Oui</td>\r\n        <td>Noms des clés à hydrater (ex: ['patient', 'service'])</td>\r\n      </tr>\r\n      <tr>\r\n        <td>config</td>\r\n        <td>Object</td>\r\n        <td>Non</td>\r\n        <td>Configuration optionnelle par clé (controller custom, filtre)</td>\r\n      </tr>\r\n    </tbody>\r\n  </table>\r\n\r\n  <h4 class=\"h4\">Configuration par clé</h4>\r\n  <table class=\"t-default mb-15 w-100\">\r\n    <thead>\r\n      <tr>\r\n        <th>Option</th>\r\n        <th>Type</th>\r\n        <th>Description</th>\r\n      </tr>\r\n    </thead>\r\n    <tbody>\r\n      <tr>\r\n        <td>controller</td>\r\n        <td>string</td>\r\n        <td>Nom du controller à utiliser (par défaut: nom de la clé)</td>\r\n      </tr>\r\n      <tr>\r\n        <td>filter</td>\r\n        <td>Function</td>\r\n        <td>Fonction de filtrage qui retourne <span class=\"badge-code\">true</span> pour inclure l'item ou <span class=\"badge-code\">false</span> pour l'exclure.</td>\r\n      </tr>\r\n    </tbody>\r\n  </table>\r\n\r\n  <h4 class=\"h4\">Utilisation simple</h4>\r\n  <div class=\"div-code\">\r\n    import { HydrateFunctions } from '@brugmann/vuemann/src/services/utils/src/utils-hydrate.js'<br /><br />\r\n    <span class=\"color-neutral-700\">// Données avec références simples</span><br />\r\n    const hospitalizations = [<br />\r\n    &nbsp;&nbsp;{ id: 1, patient: { id: 1 }, service: { id: 2 } },<br />\r\n    &nbsp;&nbsp;{ id: 2, patient: { id: 2 }, service: { id: 2 } }<br />\r\n    ]<br /><br />\r\n    <span class=\"color-neutral-700\">// Hydratation automatique</span><br />\r\n    const hydratedData = await HydrateFunctions.hydrate(hospitalizations, ['patient', 'service'])<br /><br />\r\n    <span class=\"color-neutral-700\">// Résultat : les références sont remplacées par les entités complètes</span><br />\r\n    <span class=\"color-neutral-700\">// hydratedData[0].patient = { id: 1, firstname: 'John', lastname: 'Doe', ... }</span>\r\n  </div>\r\n\r\n  <h4 class=\"h4\">Avec filtre pour exclure des items</h4>\r\n  <div class=\"div-code\">\r\n    const config = {<br />\r\n    &nbsp;&nbsp;patient: {<br />\r\n    &nbsp;&nbsp;&nbsp;&nbsp;<span class=\"color-neutral-700\">// Ne charger que les patients des hospitalisations actives</span><br />\r\n    &nbsp;&nbsp;&nbsp;&nbsp;filter: (h) => h.status === 'active'&nbsp;&nbsp;<span class=\"color-neutral-700\">// Retourne true ou false</span><br />\r\n    &nbsp;&nbsp;}<br />\r\n    }<br /><br />\r\n    const hydratedData = await HydrateFunctions.hydrate(hospitalizations, ['patient'], config)\r\n  </div>\r\n\r\n  <h4 class=\"h4\">Exemples de filtres</h4>\r\n  <div class=\"div-code\">\r\n    <span class=\"color-success-500\">// ✅ CORRECT : Retourne un boolean</span><br />\r\n    filter: (h) => h.status === 'active'<br />\r\n    filter: (h) => h.id > 10<br />\r\n    filter: (h) => h.date !== null<br /><br />\r\n    <span class=\"color-danger-500\">// ❌ INCORRECT : Retourne un objet (transformation)</span><br />\r\n    filter: (h) => ({ ...h, transformed: true })<br /><br />\r\n    <span class=\"color-danger-500\">// ❌ INCORRECT : Retourne l'item ou false</span><br />\r\n    filter: (h) => h.status === 'active' ? h : false\r\n  </div>\r\n\r\n  <h4 class=\"h4\">Avec controller personnalisé</h4>\r\n  <div class=\"div-code\">\r\n    const config = {<br />\r\n    &nbsp;&nbsp;practitioner: {<br />\r\n    &nbsp;&nbsp;&nbsp;&nbsp;<span class=\"color-neutral-700\">// Utiliser le controller \"opera\" au lieu de \"practitioner\"</span><br />\r\n    &nbsp;&nbsp;&nbsp;&nbsp;controller: 'opera'<br />\r\n    &nbsp;&nbsp;}<br />\r\n    }<br /><br />\r\n    const hydratedData = await HydrateFunctions.hydrate(surgeries, ['practitioner'], config)\r\n  </div>\r\n\r\n  <h4 class=\"h4\">Prérequis</h4>\r\n  <p>\r\n    Pour fonctionner correctement, la fonction <span class=\"badge-code\">hydrate</span> nécessite que :\r\n  </p>\r\n  <ul class=\"list ml-25 f-column g-5\">\r\n    <li>Les <strong>controllers</strong> concernés possèdent une méthode <span class=\"badge-code\">byIds(ids)</span> qui accepte un tableau d'IDs et retourne les entités correspondantes</li>\r\n    <li>Les objets de référence contiennent au minimum une propriété <span class=\"badge-code\">id</span></li>\r\n    <li>Les controllers suivent la convention de nommage <span class=\"badge-code\">{name}Controller</span> et sont situés dans <span class=\"badge-code\">/src/apis/{name}/controllers/{name}-controller.js</span></li>\r\n  </ul>\r\n\r\n  <h4 class=\"h4\">Exemple de méthode byIds dans un controller</h4>\r\n  <div class=\"div-code\">\r\n    <span class=\"color-neutral-700\">// src/apis/patient/controllers/patient-controller.js</span><br />\r\n    const byIds = async (ids) => {<br />\r\n    &nbsp;&nbsp;const response = await PatientRepository.byIds(ids)<br />\r\n    &nbsp;&nbsp;if (response.status !== STATUS.SUCCESS) {<br />\r\n    &nbsp;&nbsp;&nbsp;&nbsp;return { status: response.status, error: response.error }<br />\r\n    &nbsp;&nbsp;}<br /><br />\r\n    &nbsp;&nbsp;return {<br />\r\n    &nbsp;&nbsp;&nbsp;&nbsp;status: STATUS.SUCCESS,<br />\r\n    &nbsp;&nbsp;&nbsp;&nbsp;data: response.data.map((patient) => PatientDto.fromShow(patient))<br />\r\n    &nbsp;&nbsp;}<br />\r\n    }<br /><br />\r\n    export const PatientController = { byIds }\r\n  </div>\r\n\r\n  <h4 class=\"h4\">Avantages</h4>\r\n  <ul class=\"list ml-25 f-column g-5\">\r\n    <li><strong>Performance</strong> : Dédoublonne automatiquement les IDs et charge en batch</li>\r\n    <li><strong>Simplicité</strong> : Une seule fonction pour gérer plusieurs relations</li>\r\n    <li><strong>Flexibilité</strong> : Filtres et controllers personnalisés</li>\r\n    <li><strong>Immutabilité</strong> : Ne modifie pas les données originales</li>\r\n  </ul>\r\n</template>\r\n"],"names":["_createElementVNode","_createVNode","_component_router_link","_cache"],"mappings":"2+BAuBEA,EAEI,IAAA,KAAA,eAFD,iGAC4F,EAAA,GAAAC,EAAgGC,EAAA,CAAlF,GAAI,CAAA,KAAA,YAAA,EAAsB,MAAM,uCAA2B,IAAS,CAAA,GAAAC,EAAA,CAAA,IAAAA,EAAA,CAAA,EAAA,GAAT,YAAS,EAAA,0BAAc,KAC/L,EAAA"}